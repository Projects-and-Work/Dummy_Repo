
FreeRTOS_Projects3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000211c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002324  08002324  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800232c  0800232c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800232c  0800232c  0001232c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  080023a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080023a4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059f0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001208  00000000  00000000  00025a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b8  00000000  00000000  00026c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000410  00000000  00000000  00027150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002097c  00000000  00000000  00027560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004d3b  00000000  00000000  00047edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0888  00000000  00000000  0004cc17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d49f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a8  00000000  00000000  0010d51c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800228c 	.word	0x0800228c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800228c 	.word	0x0800228c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f90d 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 f8fc 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f917 	bl	800075e <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f8ed 	bl	8000726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000098 	.word	0x20000098

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000098 	.word	0x20000098

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	; (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	; (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	; 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ff8e 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff47 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000738:	f7ff ff5c 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 800073c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff ff8e 	bl	8000664 <NVIC_EncodePriority>
 8000748:	4602      	mov	r2, r0
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff5d 	bl	8000610 <__NVIC_SetPriority>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ffb0 	bl	80006cc <SysTick_Config>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	b480      	push	{r7}
 800077a:	b089      	sub	sp, #36	; 0x24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	e16b      	b.n	8000a6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000794:	2201      	movs	r2, #1
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	f040 815a 	bne.w	8000a66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d00b      	beq.n	80007d2 <HAL_GPIO_Init+0x5a>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d007      	beq.n	80007d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c6:	2b11      	cmp	r3, #17
 80007c8:	d003      	beq.n	80007d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b12      	cmp	r3, #18
 80007d0:	d130      	bne.n	8000834 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	2203      	movs	r2, #3
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	4013      	ands	r3, r2
 80007e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	68da      	ldr	r2, [r3, #12]
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000808:	2201      	movs	r2, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	4013      	ands	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	091b      	lsrs	r3, r3, #4
 800081e:	f003 0201 	and.w	r2, r3, #1
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	4313      	orrs	r3, r2
 800082c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2203      	movs	r2, #3
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4313      	orrs	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d003      	beq.n	8000874 <HAL_GPIO_Init+0xfc>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b12      	cmp	r3, #18
 8000872:	d123      	bne.n	80008bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	08da      	lsrs	r2, r3, #3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3208      	adds	r2, #8
 800087c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	220f      	movs	r2, #15
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4013      	ands	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	691a      	ldr	r2, [r3, #16]
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	69b9      	ldr	r1, [r7, #24]
 80008b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 0203 	and.w	r2, r3, #3
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80b4 	beq.w	8000a66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b5f      	ldr	r3, [pc, #380]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a5e      	ldr	r2, [pc, #376]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b5c      	ldr	r3, [pc, #368]	; (8000a80 <HAL_GPIO_Init+0x308>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800091a:	4a5a      	ldr	r2, [pc, #360]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	3302      	adds	r3, #2
 8000922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	220f      	movs	r2, #15
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	4013      	ands	r3, r2
 800093c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a51      	ldr	r2, [pc, #324]	; (8000a88 <HAL_GPIO_Init+0x310>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d02b      	beq.n	800099e <HAL_GPIO_Init+0x226>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <HAL_GPIO_Init+0x314>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d025      	beq.n	800099a <HAL_GPIO_Init+0x222>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a4f      	ldr	r2, [pc, #316]	; (8000a90 <HAL_GPIO_Init+0x318>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d01f      	beq.n	8000996 <HAL_GPIO_Init+0x21e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a4e      	ldr	r2, [pc, #312]	; (8000a94 <HAL_GPIO_Init+0x31c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d019      	beq.n	8000992 <HAL_GPIO_Init+0x21a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a4d      	ldr	r2, [pc, #308]	; (8000a98 <HAL_GPIO_Init+0x320>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d013      	beq.n	800098e <HAL_GPIO_Init+0x216>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a4c      	ldr	r2, [pc, #304]	; (8000a9c <HAL_GPIO_Init+0x324>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00d      	beq.n	800098a <HAL_GPIO_Init+0x212>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a4b      	ldr	r2, [pc, #300]	; (8000aa0 <HAL_GPIO_Init+0x328>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d007      	beq.n	8000986 <HAL_GPIO_Init+0x20e>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4a      	ldr	r2, [pc, #296]	; (8000aa4 <HAL_GPIO_Init+0x32c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_GPIO_Init+0x20a>
 800097e:	2307      	movs	r3, #7
 8000980:	e00e      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000982:	2308      	movs	r3, #8
 8000984:	e00c      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000986:	2306      	movs	r3, #6
 8000988:	e00a      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098a:	2305      	movs	r3, #5
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800098e:	2304      	movs	r3, #4
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x228>
 800099e:	2300      	movs	r3, #0
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	f002 0203 	and.w	r2, r2, #3
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b0:	4934      	ldr	r1, [pc, #208]	; (8000a84 <HAL_GPIO_Init+0x30c>)
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009e2:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_GPIO_Init+0x330>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	f67f ae90 	bls.w	8000794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	3724      	adds	r7, #36	; 0x24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40021400 	.word	0x40021400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40021c00 	.word	0x40021c00
 8000aa8:	40013c00 	.word	0x40013c00

08000aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ac8:	e003      	b.n	8000ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	041a      	lsls	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	619a      	str	r2, [r3, #24]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e25b      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d075      	beq.n	8000bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d00c      	beq.n	8000b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b0a:	4ba0      	ldr	r3, [pc, #640]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d112      	bne.n	8000b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b16:	4b9d      	ldr	r3, [pc, #628]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b22:	d10b      	bne.n	8000b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b24:	4b99      	ldr	r3, [pc, #612]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d05b      	beq.n	8000be8 <HAL_RCC_OscConfig+0x108>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d157      	bne.n	8000be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e236      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b44:	d106      	bne.n	8000b54 <HAL_RCC_OscConfig+0x74>
 8000b46:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a90      	ldr	r2, [pc, #576]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e01d      	b.n	8000b90 <HAL_RCC_OscConfig+0xb0>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b5c:	d10c      	bne.n	8000b78 <HAL_RCC_OscConfig+0x98>
 8000b5e:	4b8b      	ldr	r3, [pc, #556]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a8a      	ldr	r2, [pc, #552]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b88      	ldr	r3, [pc, #544]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a87      	ldr	r2, [pc, #540]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e00b      	b.n	8000b90 <HAL_RCC_OscConfig+0xb0>
 8000b78:	4b84      	ldr	r3, [pc, #528]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a83      	ldr	r2, [pc, #524]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b81      	ldr	r3, [pc, #516]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a80      	ldr	r2, [pc, #512]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d013      	beq.n	8000bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b98:	f7ff fcfc 	bl	8000594 <HAL_GetTick>
 8000b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9e:	e008      	b.n	8000bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba0:	f7ff fcf8 	bl	8000594 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b64      	cmp	r3, #100	; 0x64
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e1fb      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f0      	beq.n	8000ba0 <HAL_RCC_OscConfig+0xc0>
 8000bbe:	e014      	b.n	8000bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fce8 	bl	8000594 <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc8:	f7ff fce4 	bl	8000594 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b64      	cmp	r3, #100	; 0x64
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e1e7      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bda:	4b6c      	ldr	r3, [pc, #432]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f0      	bne.n	8000bc8 <HAL_RCC_OscConfig+0xe8>
 8000be6:	e000      	b.n	8000bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d063      	beq.n	8000cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bf6:	4b65      	ldr	r3, [pc, #404]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00b      	beq.n	8000c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c02:	4b62      	ldr	r3, [pc, #392]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d11c      	bne.n	8000c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c0e:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d116      	bne.n	8000c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d005      	beq.n	8000c32 <HAL_RCC_OscConfig+0x152>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d001      	beq.n	8000c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e1bb      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c32:	4b56      	ldr	r3, [pc, #344]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4952      	ldr	r1, [pc, #328]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c46:	e03a      	b.n	8000cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d020      	beq.n	8000c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c50:	4b4f      	ldr	r3, [pc, #316]	; (8000d90 <HAL_RCC_OscConfig+0x2b0>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c56:	f7ff fc9d 	bl	8000594 <HAL_GetTick>
 8000c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5c:	e008      	b.n	8000c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5e:	f7ff fc99 	bl	8000594 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d901      	bls.n	8000c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e19c      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c70:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f0      	beq.n	8000c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7c:	4b43      	ldr	r3, [pc, #268]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4940      	ldr	r1, [pc, #256]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
 8000c90:	e015      	b.n	8000cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_RCC_OscConfig+0x2b0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c98:	f7ff fc7c 	bl	8000594 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca0:	f7ff fc78 	bl	8000594 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e17b      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb2:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d030      	beq.n	8000d2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d016      	beq.n	8000d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd2:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <HAL_RCC_OscConfig+0x2b4>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cd8:	f7ff fc5c 	bl	8000594 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fc58 	bl	8000594 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e15b      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f0      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x200>
 8000cfe:	e015      	b.n	8000d2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_RCC_OscConfig+0x2b4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fc45 	bl	8000594 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fc41 	bl	8000594 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e144      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f0      	bne.n	8000d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80a0 	beq.w	8000e7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10f      	bne.n	8000d6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_RCC_OscConfig+0x2b8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d121      	bne.n	8000dba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_RCC_OscConfig+0x2b8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_RCC_OscConfig+0x2b8>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fc07 	bl	8000594 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d88:	e011      	b.n	8000dae <HAL_RCC_OscConfig+0x2ce>
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	42470000 	.word	0x42470000
 8000d94:	42470e80 	.word	0x42470e80
 8000d98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9c:	f7ff fbfa 	bl	8000594 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0fd      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	4b81      	ldr	r3, [pc, #516]	; (8000fb4 <HAL_RCC_OscConfig+0x4d4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d106      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x2f0>
 8000dc2:	4b7d      	ldr	r3, [pc, #500]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dc6:	4a7c      	ldr	r2, [pc, #496]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dce:	e01c      	b.n	8000e0a <HAL_RCC_OscConfig+0x32a>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d10c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x312>
 8000dd8:	4b77      	ldr	r3, [pc, #476]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ddc:	4a76      	ldr	r2, [pc, #472]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6713      	str	r3, [r2, #112]	; 0x70
 8000de4:	4b74      	ldr	r3, [pc, #464]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de8:	4a73      	ldr	r2, [pc, #460]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6713      	str	r3, [r2, #112]	; 0x70
 8000df0:	e00b      	b.n	8000e0a <HAL_RCC_OscConfig+0x32a>
 8000df2:	4b71      	ldr	r3, [pc, #452]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df6:	4a70      	ldr	r2, [pc, #448]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dfe:	4b6e      	ldr	r3, [pc, #440]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e02:	4a6d      	ldr	r2, [pc, #436]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000e04:	f023 0304 	bic.w	r3, r3, #4
 8000e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d015      	beq.n	8000e3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e12:	f7ff fbbf 	bl	8000594 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e18:	e00a      	b.n	8000e30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fbbb 	bl	8000594 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e0bc      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e30:	4b61      	ldr	r3, [pc, #388]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0ee      	beq.n	8000e1a <HAL_RCC_OscConfig+0x33a>
 8000e3c:	e014      	b.n	8000e68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fba9 	bl	8000594 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f7ff fba5 	bl	8000594 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e0a6      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e5c:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1ee      	bne.n	8000e46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d105      	bne.n	8000e7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6e:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a51      	ldr	r2, [pc, #324]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8092 	beq.w	8000fa8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e84:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d05c      	beq.n	8000f4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d141      	bne.n	8000f1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e98:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <HAL_RCC_OscConfig+0x4dc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fb79 	bl	8000594 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea6:	f7ff fb75 	bl	8000594 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e078      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eb8:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f0      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69da      	ldr	r2, [r3, #28]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	019b      	lsls	r3, r3, #6
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eda:	085b      	lsrs	r3, r3, #1
 8000edc:	3b01      	subs	r3, #1
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	061b      	lsls	r3, r3, #24
 8000ee8:	4933      	ldr	r1, [pc, #204]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <HAL_RCC_OscConfig+0x4dc>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fb4e 	bl	8000594 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efc:	f7ff fb4a 	bl	8000594 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e04d      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x41c>
 8000f1a:	e045      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_RCC_OscConfig+0x4dc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb37 	bl	8000594 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fb33 	bl	8000594 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e036      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f0      	bne.n	8000f2a <HAL_RCC_OscConfig+0x44a>
 8000f48:	e02e      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e029      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d11c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d115      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f7e:	4013      	ands	r3, r2
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d10d      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d106      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d001      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	42470060 	.word	0x42470060

08000fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e0cc      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd4:	4b68      	ldr	r3, [pc, #416]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d90c      	bls.n	8000ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe2:	4b65      	ldr	r3, [pc, #404]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d001      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0b8      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d020      	beq.n	800104a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001014:	4b59      	ldr	r3, [pc, #356]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a58      	ldr	r2, [pc, #352]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800101a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800101e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a52      	ldr	r2, [pc, #328]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	494d      	ldr	r1, [pc, #308]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	4313      	orrs	r3, r2
 8001048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d044      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d107      	bne.n	800106e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d119      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e07f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800107a:	2b03      	cmp	r3, #3
 800107c:	d107      	bne.n	800108e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107e:	4b3f      	ldr	r3, [pc, #252]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e06f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e067      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f023 0203 	bic.w	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4934      	ldr	r1, [pc, #208]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010b0:	f7ff fa70 	bl	8000594 <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b6:	e00a      	b.n	80010ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff fa6c 	bl	8000594 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e04f      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 020c 	and.w	r2, r3, #12
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	429a      	cmp	r2, r3
 80010de:	d1eb      	bne.n	80010b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 030f 	and.w	r3, r3, #15
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d20c      	bcs.n	8001108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_RCC_ClockConfig+0x1b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e032      	b.n	800116e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4916      	ldr	r1, [pc, #88]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	4313      	orrs	r3, r2
 8001124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d009      	beq.n	8001146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	490e      	ldr	r1, [pc, #56]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001146:	f000 f821 	bl	800118c <HAL_RCC_GetSysClockFreq>
 800114a:	4601      	mov	r1, r0
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_RCC_ClockConfig+0x1c0>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	fa21 f303 	lsr.w	r3, r1, r3
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_RCC_ClockConfig+0x1c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9d0 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00
 800117c:	40023800 	.word	0x40023800
 8001180:	080022b0 	.word	0x080022b0
 8001184:	20000008 	.word	0x20000008
 8001188:	20000000 	.word	0x20000000

0800118c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a2:	4b63      	ldr	r3, [pc, #396]	; (8001330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d007      	beq.n	80011be <HAL_RCC_GetSysClockFreq+0x32>
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d008      	beq.n	80011c4 <HAL_RCC_GetSysClockFreq+0x38>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 80b4 	bne.w	8001320 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b8:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80011ba:	60bb      	str	r3, [r7, #8]
       break;
 80011bc:	e0b3      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011be:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80011c0:	60bb      	str	r3, [r7, #8]
      break;
 80011c2:	e0b0      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011c4:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011ce:	4b58      	ldr	r3, [pc, #352]	; (8001330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d04a      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	099b      	lsrs	r3, r3, #6
 80011e0:	f04f 0400 	mov.w	r4, #0
 80011e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	ea03 0501 	and.w	r5, r3, r1
 80011f0:	ea04 0602 	and.w	r6, r4, r2
 80011f4:	4629      	mov	r1, r5
 80011f6:	4632      	mov	r2, r6
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	f04f 0400 	mov.w	r4, #0
 8001200:	0154      	lsls	r4, r2, #5
 8001202:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001206:	014b      	lsls	r3, r1, #5
 8001208:	4619      	mov	r1, r3
 800120a:	4622      	mov	r2, r4
 800120c:	1b49      	subs	r1, r1, r5
 800120e:	eb62 0206 	sbc.w	r2, r2, r6
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	f04f 0400 	mov.w	r4, #0
 800121a:	0194      	lsls	r4, r2, #6
 800121c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001220:	018b      	lsls	r3, r1, #6
 8001222:	1a5b      	subs	r3, r3, r1
 8001224:	eb64 0402 	sbc.w	r4, r4, r2
 8001228:	f04f 0100 	mov.w	r1, #0
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	00e2      	lsls	r2, r4, #3
 8001232:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001236:	00d9      	lsls	r1, r3, #3
 8001238:	460b      	mov	r3, r1
 800123a:	4614      	mov	r4, r2
 800123c:	195b      	adds	r3, r3, r5
 800123e:	eb44 0406 	adc.w	r4, r4, r6
 8001242:	f04f 0100 	mov.w	r1, #0
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	0262      	lsls	r2, r4, #9
 800124c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001250:	0259      	lsls	r1, r3, #9
 8001252:	460b      	mov	r3, r1
 8001254:	4614      	mov	r4, r2
 8001256:	4618      	mov	r0, r3
 8001258:	4621      	mov	r1, r4
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f04f 0400 	mov.w	r4, #0
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	f7fe ffb0 	bl	80001c8 <__aeabi_uldivmod>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e049      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	f04f 0400 	mov.w	r4, #0
 800127a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	ea03 0501 	and.w	r5, r3, r1
 8001286:	ea04 0602 	and.w	r6, r4, r2
 800128a:	4629      	mov	r1, r5
 800128c:	4632      	mov	r2, r6
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	f04f 0400 	mov.w	r4, #0
 8001296:	0154      	lsls	r4, r2, #5
 8001298:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800129c:	014b      	lsls	r3, r1, #5
 800129e:	4619      	mov	r1, r3
 80012a0:	4622      	mov	r2, r4
 80012a2:	1b49      	subs	r1, r1, r5
 80012a4:	eb62 0206 	sbc.w	r2, r2, r6
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	f04f 0400 	mov.w	r4, #0
 80012b0:	0194      	lsls	r4, r2, #6
 80012b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012b6:	018b      	lsls	r3, r1, #6
 80012b8:	1a5b      	subs	r3, r3, r1
 80012ba:	eb64 0402 	sbc.w	r4, r4, r2
 80012be:	f04f 0100 	mov.w	r1, #0
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	00e2      	lsls	r2, r4, #3
 80012c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012cc:	00d9      	lsls	r1, r3, #3
 80012ce:	460b      	mov	r3, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	195b      	adds	r3, r3, r5
 80012d4:	eb44 0406 	adc.w	r4, r4, r6
 80012d8:	f04f 0100 	mov.w	r1, #0
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	02a2      	lsls	r2, r4, #10
 80012e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012e6:	0299      	lsls	r1, r3, #10
 80012e8:	460b      	mov	r3, r1
 80012ea:	4614      	mov	r4, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	4621      	mov	r1, r4
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	461a      	mov	r2, r3
 80012f8:	4623      	mov	r3, r4
 80012fa:	f7fe ff65 	bl	80001c8 <__aeabi_uldivmod>
 80012fe:	4603      	mov	r3, r0
 8001300:	460c      	mov	r4, r1
 8001302:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	3301      	adds	r3, #1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	60bb      	str	r3, [r7, #8]
      break;
 800131e:	e002      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001322:	60bb      	str	r3, [r7, #8]
      break;
 8001324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001326:	68bb      	ldr	r3, [r7, #8]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	00f42400 	.word	0x00f42400
 8001338:	007a1200 	.word	0x007a1200

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f7ff f8c2 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f808 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 f870 	bl	800142c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello World\n");
 800134c:	4801      	ldr	r0, [pc, #4]	; (8001354 <main+0x18>)
 800134e:	f000 fb91 	bl	8001a74 <puts>
 8001352:	e7fb      	b.n	800134c <main+0x10>
 8001354:	080022a4 	.word	0x080022a4

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fb20 	bl	80019ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <SystemClock_Config+0xcc>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <SystemClock_Config+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <SystemClock_Config+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <SystemClock_Config+0xd0>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013bc:	2310      	movs	r3, #16
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c8:	2308      	movs	r3, #8
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80013cc:	2332      	movs	r3, #50	; 0x32
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d4:	2307      	movs	r3, #7
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fb7f 	bl	8000ae0 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e8:	f000 f97e 	bl	80016e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80013f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80013fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001402:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fdd8 	bl	8000fc0 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001416:	f000 f967 	bl	80016e8 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	; 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4ba1      	ldr	r3, [pc, #644]	; (80016cc <MX_GPIO_Init+0x2a0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4aa0      	ldr	r2, [pc, #640]	; (80016cc <MX_GPIO_Init+0x2a0>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b9e      	ldr	r3, [pc, #632]	; (80016cc <MX_GPIO_Init+0x2a0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	4b9a      	ldr	r3, [pc, #616]	; (80016cc <MX_GPIO_Init+0x2a0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a99      	ldr	r2, [pc, #612]	; (80016cc <MX_GPIO_Init+0x2a0>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b97      	ldr	r3, [pc, #604]	; (80016cc <MX_GPIO_Init+0x2a0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b93      	ldr	r3, [pc, #588]	; (80016cc <MX_GPIO_Init+0x2a0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a92      	ldr	r2, [pc, #584]	; (80016cc <MX_GPIO_Init+0x2a0>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b90      	ldr	r3, [pc, #576]	; (80016cc <MX_GPIO_Init+0x2a0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b8c      	ldr	r3, [pc, #560]	; (80016cc <MX_GPIO_Init+0x2a0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a8b      	ldr	r2, [pc, #556]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b89      	ldr	r3, [pc, #548]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b85      	ldr	r3, [pc, #532]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a84      	ldr	r2, [pc, #528]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b7e      	ldr	r3, [pc, #504]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a7d      	ldr	r2, [pc, #500]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <MX_GPIO_Init+0x2a0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2108      	movs	r1, #8
 80014ee:	4878      	ldr	r0, [pc, #480]	; (80016d0 <MX_GPIO_Init+0x2a4>)
 80014f0:	f7ff fadc 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2101      	movs	r1, #1
 80014f8:	4876      	ldr	r0, [pc, #472]	; (80016d4 <MX_GPIO_Init+0x2a8>)
 80014fa:	f7ff fad7 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80014fe:	2200      	movs	r2, #0
 8001500:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001504:	4874      	ldr	r0, [pc, #464]	; (80016d8 <MX_GPIO_Init+0x2ac>)
 8001506:	f7ff fad1 	bl	8000aac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800150a:	2308      	movs	r3, #8
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	486b      	ldr	r0, [pc, #428]	; (80016d0 <MX_GPIO_Init+0x2a4>)
 8001522:	f7ff f929 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001526:	2301      	movs	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4865      	ldr	r0, [pc, #404]	; (80016d4 <MX_GPIO_Init+0x2a8>)
 800153e:	f7ff f91b 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001542:	2308      	movs	r3, #8
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001552:	2305      	movs	r3, #5
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	485d      	ldr	r0, [pc, #372]	; (80016d4 <MX_GPIO_Init+0x2a8>)
 800155e:	f7ff f90b 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <MX_GPIO_Init+0x2b0>)
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	485a      	ldr	r0, [pc, #360]	; (80016e0 <MX_GPIO_Init+0x2b4>)
 8001576:	f7ff f8ff 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800157a:	2310      	movs	r3, #16
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800158a:	2306      	movs	r3, #6
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4852      	ldr	r0, [pc, #328]	; (80016e0 <MX_GPIO_Init+0x2b4>)
 8001596:	f7ff f8ef 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800159a:	23e0      	movs	r3, #224	; 0xe0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015aa:	2305      	movs	r3, #5
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	484a      	ldr	r0, [pc, #296]	; (80016e0 <MX_GPIO_Init+0x2b4>)
 80015b6:	f7ff f8df 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015ba:	2304      	movs	r3, #4
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4845      	ldr	r0, [pc, #276]	; (80016e4 <MX_GPIO_Init+0x2b8>)
 80015ce:	f7ff f8d3 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e4:	2305      	movs	r3, #5
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	483d      	ldr	r0, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x2b8>)
 80015f0:	f7ff f8c2 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80015f4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015f8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4832      	ldr	r0, [pc, #200]	; (80016d8 <MX_GPIO_Init+0x2ac>)
 800160e:	f7ff f8b3 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001612:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001624:	2306      	movs	r3, #6
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4829      	ldr	r0, [pc, #164]	; (80016d4 <MX_GPIO_Init+0x2a8>)
 8001630:	f7ff f8a2 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4825      	ldr	r0, [pc, #148]	; (80016e0 <MX_GPIO_Init+0x2b4>)
 800164a:	f7ff f895 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800164e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001660:	230a      	movs	r3, #10
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	481d      	ldr	r0, [pc, #116]	; (80016e0 <MX_GPIO_Init+0x2b4>)
 800166c:	f7ff f884 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001670:	2320      	movs	r3, #32
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4815      	ldr	r0, [pc, #84]	; (80016d8 <MX_GPIO_Init+0x2ac>)
 8001684:	f7ff f878 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001688:	f44f 7310 	mov.w	r3, #576	; 0x240
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168e:	2312      	movs	r3, #18
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	2301      	movs	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169a:	2304      	movs	r3, #4
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	480f      	ldr	r0, [pc, #60]	; (80016e4 <MX_GPIO_Init+0x2b8>)
 80016a6:	f7ff f867 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_GPIO_Init+0x2b0>)
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_GPIO_Init+0x2a4>)
 80016be:	f7ff f85b 	bl	8000778 <HAL_GPIO_Init>

}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	; 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	10120000 	.word	0x10120000
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_MspInit+0x4c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x4c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001736:	2007      	movs	r0, #7
 8001738:	f7fe ffea 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f7fe fee6 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e00a      	b.n	80017cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017b6:	f3af 8000 	nop.w
 80017ba:	4601      	mov	r1, r0
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	60ba      	str	r2, [r7, #8]
 80017c2:	b2ca      	uxtb	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf0      	blt.n	80017b6 <_read+0x12>
	}

return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e009      	b.n	8001804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf1      	blt.n	80017f0 <_write+0x12>
	}
	return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_close>:

int _close(int file)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	return -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183e:	605a      	str	r2, [r3, #4]
	return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_isatty>:

int _isatty(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	return 1;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x50>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x16>
		heap_end = &end;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <_sbrk+0x50>)
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <_sbrk+0x54>)
 8001894:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <_sbrk+0x50>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <_sbrk+0x50>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	466a      	mov	r2, sp
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d907      	bls.n	80018ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018aa:	f000 f855 	bl	8001958 <__errno>
 80018ae:	4602      	mov	r2, r0
 80018b0:	230c      	movs	r3, #12
 80018b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	e006      	b.n	80018c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <_sbrk+0x50>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <_sbrk+0x50>)
 80018c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000008c 	.word	0x2000008c
 80018d4:	200000a0 	.word	0x200000a0

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <SystemInit+0x28>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <SystemInit+0x28>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SystemInit+0x28>)
 80018ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018f2:	609a      	str	r2, [r3, #8]
#endif
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800193c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001908:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800190a:	e003      	b.n	8001914 <LoopCopyDataInit>

0800190c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800190e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001910:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001912:	3104      	adds	r1, #4

08001914 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001914:	480b      	ldr	r0, [pc, #44]	; (8001944 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001918:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800191a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800191c:	d3f6      	bcc.n	800190c <CopyDataInit>
  ldr  r2, =_sbss
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001920:	e002      	b.n	8001928 <LoopFillZerobss>

08001922 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001922:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001924:	f842 3b04 	str.w	r3, [r2], #4

08001928 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800192a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800192c:	d3f9      	bcc.n	8001922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800192e:	f7ff ffd3 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f000 f817 	bl	8001964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff fd01 	bl	800133c <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800193c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001940:	08002334 	.word	0x08002334
  ldr  r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001948:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800194c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001950:	200000a0 	.word	0x200000a0

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <__errno>:
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <__errno+0x8>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	2000000c 	.word	0x2000000c

08001964 <__libc_init_array>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	4e0d      	ldr	r6, [pc, #52]	; (800199c <__libc_init_array+0x38>)
 8001968:	4c0d      	ldr	r4, [pc, #52]	; (80019a0 <__libc_init_array+0x3c>)
 800196a:	1ba4      	subs	r4, r4, r6
 800196c:	10a4      	asrs	r4, r4, #2
 800196e:	2500      	movs	r5, #0
 8001970:	42a5      	cmp	r5, r4
 8001972:	d109      	bne.n	8001988 <__libc_init_array+0x24>
 8001974:	4e0b      	ldr	r6, [pc, #44]	; (80019a4 <__libc_init_array+0x40>)
 8001976:	4c0c      	ldr	r4, [pc, #48]	; (80019a8 <__libc_init_array+0x44>)
 8001978:	f000 fc88 	bl	800228c <_init>
 800197c:	1ba4      	subs	r4, r4, r6
 800197e:	10a4      	asrs	r4, r4, #2
 8001980:	2500      	movs	r5, #0
 8001982:	42a5      	cmp	r5, r4
 8001984:	d105      	bne.n	8001992 <__libc_init_array+0x2e>
 8001986:	bd70      	pop	{r4, r5, r6, pc}
 8001988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800198c:	4798      	blx	r3
 800198e:	3501      	adds	r5, #1
 8001990:	e7ee      	b.n	8001970 <__libc_init_array+0xc>
 8001992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001996:	4798      	blx	r3
 8001998:	3501      	adds	r5, #1
 800199a:	e7f2      	b.n	8001982 <__libc_init_array+0x1e>
 800199c:	0800232c 	.word	0x0800232c
 80019a0:	0800232c 	.word	0x0800232c
 80019a4:	0800232c 	.word	0x0800232c
 80019a8:	08002330 	.word	0x08002330

080019ac <memset>:
 80019ac:	4402      	add	r2, r0
 80019ae:	4603      	mov	r3, r0
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d100      	bne.n	80019b6 <memset+0xa>
 80019b4:	4770      	bx	lr
 80019b6:	f803 1b01 	strb.w	r1, [r3], #1
 80019ba:	e7f9      	b.n	80019b0 <memset+0x4>

080019bc <_puts_r>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	460e      	mov	r6, r1
 80019c0:	4605      	mov	r5, r0
 80019c2:	b118      	cbz	r0, 80019cc <_puts_r+0x10>
 80019c4:	6983      	ldr	r3, [r0, #24]
 80019c6:	b90b      	cbnz	r3, 80019cc <_puts_r+0x10>
 80019c8:	f000 fa0c 	bl	8001de4 <__sinit>
 80019cc:	69ab      	ldr	r3, [r5, #24]
 80019ce:	68ac      	ldr	r4, [r5, #8]
 80019d0:	b913      	cbnz	r3, 80019d8 <_puts_r+0x1c>
 80019d2:	4628      	mov	r0, r5
 80019d4:	f000 fa06 	bl	8001de4 <__sinit>
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <_puts_r+0xac>)
 80019da:	429c      	cmp	r4, r3
 80019dc:	d117      	bne.n	8001a0e <_puts_r+0x52>
 80019de:	686c      	ldr	r4, [r5, #4]
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	071b      	lsls	r3, r3, #28
 80019e4:	d51d      	bpl.n	8001a22 <_puts_r+0x66>
 80019e6:	6923      	ldr	r3, [r4, #16]
 80019e8:	b1db      	cbz	r3, 8001a22 <_puts_r+0x66>
 80019ea:	3e01      	subs	r6, #1
 80019ec:	68a3      	ldr	r3, [r4, #8]
 80019ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60a3      	str	r3, [r4, #8]
 80019f6:	b9e9      	cbnz	r1, 8001a34 <_puts_r+0x78>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da2e      	bge.n	8001a5a <_puts_r+0x9e>
 80019fc:	4622      	mov	r2, r4
 80019fe:	210a      	movs	r1, #10
 8001a00:	4628      	mov	r0, r5
 8001a02:	f000 f83f 	bl	8001a84 <__swbuf_r>
 8001a06:	3001      	adds	r0, #1
 8001a08:	d011      	beq.n	8001a2e <_puts_r+0x72>
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	e011      	b.n	8001a32 <_puts_r+0x76>
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <_puts_r+0xb0>)
 8001a10:	429c      	cmp	r4, r3
 8001a12:	d101      	bne.n	8001a18 <_puts_r+0x5c>
 8001a14:	68ac      	ldr	r4, [r5, #8]
 8001a16:	e7e3      	b.n	80019e0 <_puts_r+0x24>
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_puts_r+0xb4>)
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	bf08      	it	eq
 8001a1e:	68ec      	ldreq	r4, [r5, #12]
 8001a20:	e7de      	b.n	80019e0 <_puts_r+0x24>
 8001a22:	4621      	mov	r1, r4
 8001a24:	4628      	mov	r0, r5
 8001a26:	f000 f87f 	bl	8001b28 <__swsetup_r>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d0dd      	beq.n	80019ea <_puts_r+0x2e>
 8001a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da04      	bge.n	8001a42 <_puts_r+0x86>
 8001a38:	69a2      	ldr	r2, [r4, #24]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dc06      	bgt.n	8001a4c <_puts_r+0x90>
 8001a3e:	290a      	cmp	r1, #10
 8001a40:	d004      	beq.n	8001a4c <_puts_r+0x90>
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	6022      	str	r2, [r4, #0]
 8001a48:	7019      	strb	r1, [r3, #0]
 8001a4a:	e7cf      	b.n	80019ec <_puts_r+0x30>
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	4628      	mov	r0, r5
 8001a50:	f000 f818 	bl	8001a84 <__swbuf_r>
 8001a54:	3001      	adds	r0, #1
 8001a56:	d1c9      	bne.n	80019ec <_puts_r+0x30>
 8001a58:	e7e9      	b.n	8001a2e <_puts_r+0x72>
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	200a      	movs	r0, #10
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	6022      	str	r2, [r4, #0]
 8001a62:	7018      	strb	r0, [r3, #0]
 8001a64:	e7e5      	b.n	8001a32 <_puts_r+0x76>
 8001a66:	bf00      	nop
 8001a68:	080022e4 	.word	0x080022e4
 8001a6c:	08002304 	.word	0x08002304
 8001a70:	080022c4 	.word	0x080022c4

08001a74 <puts>:
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <puts+0xc>)
 8001a76:	4601      	mov	r1, r0
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f7ff bf9f 	b.w	80019bc <_puts_r>
 8001a7e:	bf00      	nop
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <__swbuf_r>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	460e      	mov	r6, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	b118      	cbz	r0, 8001a96 <__swbuf_r+0x12>
 8001a8e:	6983      	ldr	r3, [r0, #24]
 8001a90:	b90b      	cbnz	r3, 8001a96 <__swbuf_r+0x12>
 8001a92:	f000 f9a7 	bl	8001de4 <__sinit>
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <__swbuf_r+0x98>)
 8001a98:	429c      	cmp	r4, r3
 8001a9a:	d12a      	bne.n	8001af2 <__swbuf_r+0x6e>
 8001a9c:	686c      	ldr	r4, [r5, #4]
 8001a9e:	69a3      	ldr	r3, [r4, #24]
 8001aa0:	60a3      	str	r3, [r4, #8]
 8001aa2:	89a3      	ldrh	r3, [r4, #12]
 8001aa4:	071a      	lsls	r2, r3, #28
 8001aa6:	d52e      	bpl.n	8001b06 <__swbuf_r+0x82>
 8001aa8:	6923      	ldr	r3, [r4, #16]
 8001aaa:	b363      	cbz	r3, 8001b06 <__swbuf_r+0x82>
 8001aac:	6923      	ldr	r3, [r4, #16]
 8001aae:	6820      	ldr	r0, [r4, #0]
 8001ab0:	1ac0      	subs	r0, r0, r3
 8001ab2:	6963      	ldr	r3, [r4, #20]
 8001ab4:	b2f6      	uxtb	r6, r6
 8001ab6:	4283      	cmp	r3, r0
 8001ab8:	4637      	mov	r7, r6
 8001aba:	dc04      	bgt.n	8001ac6 <__swbuf_r+0x42>
 8001abc:	4621      	mov	r1, r4
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f000 f926 	bl	8001d10 <_fflush_r>
 8001ac4:	bb28      	cbnz	r0, 8001b12 <__swbuf_r+0x8e>
 8001ac6:	68a3      	ldr	r3, [r4, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60a3      	str	r3, [r4, #8]
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	6022      	str	r2, [r4, #0]
 8001ad2:	701e      	strb	r6, [r3, #0]
 8001ad4:	6963      	ldr	r3, [r4, #20]
 8001ad6:	3001      	adds	r0, #1
 8001ad8:	4283      	cmp	r3, r0
 8001ada:	d004      	beq.n	8001ae6 <__swbuf_r+0x62>
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	07db      	lsls	r3, r3, #31
 8001ae0:	d519      	bpl.n	8001b16 <__swbuf_r+0x92>
 8001ae2:	2e0a      	cmp	r6, #10
 8001ae4:	d117      	bne.n	8001b16 <__swbuf_r+0x92>
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 f911 	bl	8001d10 <_fflush_r>
 8001aee:	b190      	cbz	r0, 8001b16 <__swbuf_r+0x92>
 8001af0:	e00f      	b.n	8001b12 <__swbuf_r+0x8e>
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <__swbuf_r+0x9c>)
 8001af4:	429c      	cmp	r4, r3
 8001af6:	d101      	bne.n	8001afc <__swbuf_r+0x78>
 8001af8:	68ac      	ldr	r4, [r5, #8]
 8001afa:	e7d0      	b.n	8001a9e <__swbuf_r+0x1a>
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <__swbuf_r+0xa0>)
 8001afe:	429c      	cmp	r4, r3
 8001b00:	bf08      	it	eq
 8001b02:	68ec      	ldreq	r4, [r5, #12]
 8001b04:	e7cb      	b.n	8001a9e <__swbuf_r+0x1a>
 8001b06:	4621      	mov	r1, r4
 8001b08:	4628      	mov	r0, r5
 8001b0a:	f000 f80d 	bl	8001b28 <__swsetup_r>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d0cc      	beq.n	8001aac <__swbuf_r+0x28>
 8001b12:	f04f 37ff 	mov.w	r7, #4294967295
 8001b16:	4638      	mov	r0, r7
 8001b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	080022e4 	.word	0x080022e4
 8001b20:	08002304 	.word	0x08002304
 8001b24:	080022c4 	.word	0x080022c4

08001b28 <__swsetup_r>:
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <__swsetup_r+0xcc>)
 8001b2a:	b570      	push	{r4, r5, r6, lr}
 8001b2c:	681d      	ldr	r5, [r3, #0]
 8001b2e:	4606      	mov	r6, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	b125      	cbz	r5, 8001b3e <__swsetup_r+0x16>
 8001b34:	69ab      	ldr	r3, [r5, #24]
 8001b36:	b913      	cbnz	r3, 8001b3e <__swsetup_r+0x16>
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f000 f953 	bl	8001de4 <__sinit>
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <__swsetup_r+0xd0>)
 8001b40:	429c      	cmp	r4, r3
 8001b42:	d10f      	bne.n	8001b64 <__swsetup_r+0x3c>
 8001b44:	686c      	ldr	r4, [r5, #4]
 8001b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	0715      	lsls	r5, r2, #28
 8001b4e:	d42c      	bmi.n	8001baa <__swsetup_r+0x82>
 8001b50:	06d0      	lsls	r0, r2, #27
 8001b52:	d411      	bmi.n	8001b78 <__swsetup_r+0x50>
 8001b54:	2209      	movs	r2, #9
 8001b56:	6032      	str	r2, [r6, #0]
 8001b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5c:	81a3      	strh	r3, [r4, #12]
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b62:	e03e      	b.n	8001be2 <__swsetup_r+0xba>
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <__swsetup_r+0xd4>)
 8001b66:	429c      	cmp	r4, r3
 8001b68:	d101      	bne.n	8001b6e <__swsetup_r+0x46>
 8001b6a:	68ac      	ldr	r4, [r5, #8]
 8001b6c:	e7eb      	b.n	8001b46 <__swsetup_r+0x1e>
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <__swsetup_r+0xd8>)
 8001b70:	429c      	cmp	r4, r3
 8001b72:	bf08      	it	eq
 8001b74:	68ec      	ldreq	r4, [r5, #12]
 8001b76:	e7e6      	b.n	8001b46 <__swsetup_r+0x1e>
 8001b78:	0751      	lsls	r1, r2, #29
 8001b7a:	d512      	bpl.n	8001ba2 <__swsetup_r+0x7a>
 8001b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b7e:	b141      	cbz	r1, 8001b92 <__swsetup_r+0x6a>
 8001b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b84:	4299      	cmp	r1, r3
 8001b86:	d002      	beq.n	8001b8e <__swsetup_r+0x66>
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f000 fa19 	bl	8001fc0 <_free_r>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	6363      	str	r3, [r4, #52]	; 0x34
 8001b92:	89a3      	ldrh	r3, [r4, #12]
 8001b94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b98:	81a3      	strh	r3, [r4, #12]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6063      	str	r3, [r4, #4]
 8001b9e:	6923      	ldr	r3, [r4, #16]
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	89a3      	ldrh	r3, [r4, #12]
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	81a3      	strh	r3, [r4, #12]
 8001baa:	6923      	ldr	r3, [r4, #16]
 8001bac:	b94b      	cbnz	r3, 8001bc2 <__swsetup_r+0x9a>
 8001bae:	89a3      	ldrh	r3, [r4, #12]
 8001bb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb8:	d003      	beq.n	8001bc2 <__swsetup_r+0x9a>
 8001bba:	4621      	mov	r1, r4
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f000 f9bf 	bl	8001f40 <__smakebuf_r>
 8001bc2:	89a2      	ldrh	r2, [r4, #12]
 8001bc4:	f012 0301 	ands.w	r3, r2, #1
 8001bc8:	d00c      	beq.n	8001be4 <__swsetup_r+0xbc>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60a3      	str	r3, [r4, #8]
 8001bce:	6963      	ldr	r3, [r4, #20]
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	61a3      	str	r3, [r4, #24]
 8001bd4:	6923      	ldr	r3, [r4, #16]
 8001bd6:	b953      	cbnz	r3, 8001bee <__swsetup_r+0xc6>
 8001bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bdc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001be0:	d1ba      	bne.n	8001b58 <__swsetup_r+0x30>
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
 8001be4:	0792      	lsls	r2, r2, #30
 8001be6:	bf58      	it	pl
 8001be8:	6963      	ldrpl	r3, [r4, #20]
 8001bea:	60a3      	str	r3, [r4, #8]
 8001bec:	e7f2      	b.n	8001bd4 <__swsetup_r+0xac>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e7f7      	b.n	8001be2 <__swsetup_r+0xba>
 8001bf2:	bf00      	nop
 8001bf4:	2000000c 	.word	0x2000000c
 8001bf8:	080022e4 	.word	0x080022e4
 8001bfc:	08002304 	.word	0x08002304
 8001c00:	080022c4 	.word	0x080022c4

08001c04 <__sflush_r>:
 8001c04:	898a      	ldrh	r2, [r1, #12]
 8001c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	0710      	lsls	r0, r2, #28
 8001c0e:	460c      	mov	r4, r1
 8001c10:	d458      	bmi.n	8001cc4 <__sflush_r+0xc0>
 8001c12:	684b      	ldr	r3, [r1, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	dc05      	bgt.n	8001c24 <__sflush_r+0x20>
 8001c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	dc02      	bgt.n	8001c24 <__sflush_r+0x20>
 8001c1e:	2000      	movs	r0, #0
 8001c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c26:	2e00      	cmp	r6, #0
 8001c28:	d0f9      	beq.n	8001c1e <__sflush_r+0x1a>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c30:	682f      	ldr	r7, [r5, #0]
 8001c32:	6a21      	ldr	r1, [r4, #32]
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	d032      	beq.n	8001c9e <__sflush_r+0x9a>
 8001c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c3a:	89a3      	ldrh	r3, [r4, #12]
 8001c3c:	075a      	lsls	r2, r3, #29
 8001c3e:	d505      	bpl.n	8001c4c <__sflush_r+0x48>
 8001c40:	6863      	ldr	r3, [r4, #4]
 8001c42:	1ac0      	subs	r0, r0, r3
 8001c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c46:	b10b      	cbz	r3, 8001c4c <__sflush_r+0x48>
 8001c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c4a:	1ac0      	subs	r0, r0, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c52:	6a21      	ldr	r1, [r4, #32]
 8001c54:	4628      	mov	r0, r5
 8001c56:	47b0      	blx	r6
 8001c58:	1c43      	adds	r3, r0, #1
 8001c5a:	89a3      	ldrh	r3, [r4, #12]
 8001c5c:	d106      	bne.n	8001c6c <__sflush_r+0x68>
 8001c5e:	6829      	ldr	r1, [r5, #0]
 8001c60:	291d      	cmp	r1, #29
 8001c62:	d848      	bhi.n	8001cf6 <__sflush_r+0xf2>
 8001c64:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <__sflush_r+0x108>)
 8001c66:	40ca      	lsrs	r2, r1
 8001c68:	07d6      	lsls	r6, r2, #31
 8001c6a:	d544      	bpl.n	8001cf6 <__sflush_r+0xf2>
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6062      	str	r2, [r4, #4]
 8001c70:	04d9      	lsls	r1, r3, #19
 8001c72:	6922      	ldr	r2, [r4, #16]
 8001c74:	6022      	str	r2, [r4, #0]
 8001c76:	d504      	bpl.n	8001c82 <__sflush_r+0x7e>
 8001c78:	1c42      	adds	r2, r0, #1
 8001c7a:	d101      	bne.n	8001c80 <__sflush_r+0x7c>
 8001c7c:	682b      	ldr	r3, [r5, #0]
 8001c7e:	b903      	cbnz	r3, 8001c82 <__sflush_r+0x7e>
 8001c80:	6560      	str	r0, [r4, #84]	; 0x54
 8001c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c84:	602f      	str	r7, [r5, #0]
 8001c86:	2900      	cmp	r1, #0
 8001c88:	d0c9      	beq.n	8001c1e <__sflush_r+0x1a>
 8001c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c8e:	4299      	cmp	r1, r3
 8001c90:	d002      	beq.n	8001c98 <__sflush_r+0x94>
 8001c92:	4628      	mov	r0, r5
 8001c94:	f000 f994 	bl	8001fc0 <_free_r>
 8001c98:	2000      	movs	r0, #0
 8001c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8001c9c:	e7c0      	b.n	8001c20 <__sflush_r+0x1c>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	47b0      	blx	r6
 8001ca4:	1c41      	adds	r1, r0, #1
 8001ca6:	d1c8      	bne.n	8001c3a <__sflush_r+0x36>
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0c5      	beq.n	8001c3a <__sflush_r+0x36>
 8001cae:	2b1d      	cmp	r3, #29
 8001cb0:	d001      	beq.n	8001cb6 <__sflush_r+0xb2>
 8001cb2:	2b16      	cmp	r3, #22
 8001cb4:	d101      	bne.n	8001cba <__sflush_r+0xb6>
 8001cb6:	602f      	str	r7, [r5, #0]
 8001cb8:	e7b1      	b.n	8001c1e <__sflush_r+0x1a>
 8001cba:	89a3      	ldrh	r3, [r4, #12]
 8001cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc0:	81a3      	strh	r3, [r4, #12]
 8001cc2:	e7ad      	b.n	8001c20 <__sflush_r+0x1c>
 8001cc4:	690f      	ldr	r7, [r1, #16]
 8001cc6:	2f00      	cmp	r7, #0
 8001cc8:	d0a9      	beq.n	8001c1e <__sflush_r+0x1a>
 8001cca:	0793      	lsls	r3, r2, #30
 8001ccc:	680e      	ldr	r6, [r1, #0]
 8001cce:	bf08      	it	eq
 8001cd0:	694b      	ldreq	r3, [r1, #20]
 8001cd2:	600f      	str	r7, [r1, #0]
 8001cd4:	bf18      	it	ne
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	eba6 0807 	sub.w	r8, r6, r7
 8001cdc:	608b      	str	r3, [r1, #8]
 8001cde:	f1b8 0f00 	cmp.w	r8, #0
 8001ce2:	dd9c      	ble.n	8001c1e <__sflush_r+0x1a>
 8001ce4:	4643      	mov	r3, r8
 8001ce6:	463a      	mov	r2, r7
 8001ce8:	6a21      	ldr	r1, [r4, #32]
 8001cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001cec:	4628      	mov	r0, r5
 8001cee:	47b0      	blx	r6
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	dc06      	bgt.n	8001d02 <__sflush_r+0xfe>
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfa:	81a3      	strh	r3, [r4, #12]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	e78e      	b.n	8001c20 <__sflush_r+0x1c>
 8001d02:	4407      	add	r7, r0
 8001d04:	eba8 0800 	sub.w	r8, r8, r0
 8001d08:	e7e9      	b.n	8001cde <__sflush_r+0xda>
 8001d0a:	bf00      	nop
 8001d0c:	20400001 	.word	0x20400001

08001d10 <_fflush_r>:
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	690b      	ldr	r3, [r1, #16]
 8001d14:	4605      	mov	r5, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	b1db      	cbz	r3, 8001d52 <_fflush_r+0x42>
 8001d1a:	b118      	cbz	r0, 8001d24 <_fflush_r+0x14>
 8001d1c:	6983      	ldr	r3, [r0, #24]
 8001d1e:	b90b      	cbnz	r3, 8001d24 <_fflush_r+0x14>
 8001d20:	f000 f860 	bl	8001de4 <__sinit>
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <_fflush_r+0x48>)
 8001d26:	429c      	cmp	r4, r3
 8001d28:	d109      	bne.n	8001d3e <_fflush_r+0x2e>
 8001d2a:	686c      	ldr	r4, [r5, #4]
 8001d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d30:	b17b      	cbz	r3, 8001d52 <_fflush_r+0x42>
 8001d32:	4621      	mov	r1, r4
 8001d34:	4628      	mov	r0, r5
 8001d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d3a:	f7ff bf63 	b.w	8001c04 <__sflush_r>
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <_fflush_r+0x4c>)
 8001d40:	429c      	cmp	r4, r3
 8001d42:	d101      	bne.n	8001d48 <_fflush_r+0x38>
 8001d44:	68ac      	ldr	r4, [r5, #8]
 8001d46:	e7f1      	b.n	8001d2c <_fflush_r+0x1c>
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <_fflush_r+0x50>)
 8001d4a:	429c      	cmp	r4, r3
 8001d4c:	bf08      	it	eq
 8001d4e:	68ec      	ldreq	r4, [r5, #12]
 8001d50:	e7ec      	b.n	8001d2c <_fflush_r+0x1c>
 8001d52:	2000      	movs	r0, #0
 8001d54:	bd38      	pop	{r3, r4, r5, pc}
 8001d56:	bf00      	nop
 8001d58:	080022e4 	.word	0x080022e4
 8001d5c:	08002304 	.word	0x08002304
 8001d60:	080022c4 	.word	0x080022c4

08001d64 <std>:
 8001d64:	2300      	movs	r3, #0
 8001d66:	b510      	push	{r4, lr}
 8001d68:	4604      	mov	r4, r0
 8001d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d6e:	6083      	str	r3, [r0, #8]
 8001d70:	8181      	strh	r1, [r0, #12]
 8001d72:	6643      	str	r3, [r0, #100]	; 0x64
 8001d74:	81c2      	strh	r2, [r0, #14]
 8001d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d7a:	6183      	str	r3, [r0, #24]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	2208      	movs	r2, #8
 8001d80:	305c      	adds	r0, #92	; 0x5c
 8001d82:	f7ff fe13 	bl	80019ac <memset>
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <std+0x38>)
 8001d88:	6263      	str	r3, [r4, #36]	; 0x24
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <std+0x3c>)
 8001d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <std+0x40>)
 8001d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <std+0x44>)
 8001d94:	6224      	str	r4, [r4, #32]
 8001d96:	6323      	str	r3, [r4, #48]	; 0x30
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08002131 	.word	0x08002131
 8001da0:	08002153 	.word	0x08002153
 8001da4:	0800218b 	.word	0x0800218b
 8001da8:	080021af 	.word	0x080021af

08001dac <_cleanup_r>:
 8001dac:	4901      	ldr	r1, [pc, #4]	; (8001db4 <_cleanup_r+0x8>)
 8001dae:	f000 b885 	b.w	8001ebc <_fwalk_reent>
 8001db2:	bf00      	nop
 8001db4:	08001d11 	.word	0x08001d11

08001db8 <__sfmoreglue>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	1e4a      	subs	r2, r1, #1
 8001dbc:	2568      	movs	r5, #104	; 0x68
 8001dbe:	4355      	muls	r5, r2
 8001dc0:	460e      	mov	r6, r1
 8001dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001dc6:	f000 f949 	bl	800205c <_malloc_r>
 8001dca:	4604      	mov	r4, r0
 8001dcc:	b140      	cbz	r0, 8001de0 <__sfmoreglue+0x28>
 8001dce:	2100      	movs	r1, #0
 8001dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8001dd4:	300c      	adds	r0, #12
 8001dd6:	60a0      	str	r0, [r4, #8]
 8001dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ddc:	f7ff fde6 	bl	80019ac <memset>
 8001de0:	4620      	mov	r0, r4
 8001de2:	bd70      	pop	{r4, r5, r6, pc}

08001de4 <__sinit>:
 8001de4:	6983      	ldr	r3, [r0, #24]
 8001de6:	b510      	push	{r4, lr}
 8001de8:	4604      	mov	r4, r0
 8001dea:	bb33      	cbnz	r3, 8001e3a <__sinit+0x56>
 8001dec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001df0:	6503      	str	r3, [r0, #80]	; 0x50
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <__sinit+0x58>)
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <__sinit+0x5c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6282      	str	r2, [r0, #40]	; 0x28
 8001dfa:	4298      	cmp	r0, r3
 8001dfc:	bf04      	itt	eq
 8001dfe:	2301      	moveq	r3, #1
 8001e00:	6183      	streq	r3, [r0, #24]
 8001e02:	f000 f81f 	bl	8001e44 <__sfp>
 8001e06:	6060      	str	r0, [r4, #4]
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f000 f81b 	bl	8001e44 <__sfp>
 8001e0e:	60a0      	str	r0, [r4, #8]
 8001e10:	4620      	mov	r0, r4
 8001e12:	f000 f817 	bl	8001e44 <__sfp>
 8001e16:	2200      	movs	r2, #0
 8001e18:	60e0      	str	r0, [r4, #12]
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	6860      	ldr	r0, [r4, #4]
 8001e1e:	f7ff ffa1 	bl	8001d64 <std>
 8001e22:	2201      	movs	r2, #1
 8001e24:	2109      	movs	r1, #9
 8001e26:	68a0      	ldr	r0, [r4, #8]
 8001e28:	f7ff ff9c 	bl	8001d64 <std>
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	2112      	movs	r1, #18
 8001e30:	68e0      	ldr	r0, [r4, #12]
 8001e32:	f7ff ff97 	bl	8001d64 <std>
 8001e36:	2301      	movs	r3, #1
 8001e38:	61a3      	str	r3, [r4, #24]
 8001e3a:	bd10      	pop	{r4, pc}
 8001e3c:	080022c0 	.word	0x080022c0
 8001e40:	08001dad 	.word	0x08001dad

08001e44 <__sfp>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <__sfp+0x70>)
 8001e48:	681e      	ldr	r6, [r3, #0]
 8001e4a:	69b3      	ldr	r3, [r6, #24]
 8001e4c:	4607      	mov	r7, r0
 8001e4e:	b913      	cbnz	r3, 8001e56 <__sfp+0x12>
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7ff ffc7 	bl	8001de4 <__sinit>
 8001e56:	3648      	adds	r6, #72	; 0x48
 8001e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	d503      	bpl.n	8001e68 <__sfp+0x24>
 8001e60:	6833      	ldr	r3, [r6, #0]
 8001e62:	b133      	cbz	r3, 8001e72 <__sfp+0x2e>
 8001e64:	6836      	ldr	r6, [r6, #0]
 8001e66:	e7f7      	b.n	8001e58 <__sfp+0x14>
 8001e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e6c:	b16d      	cbz	r5, 8001e8a <__sfp+0x46>
 8001e6e:	3468      	adds	r4, #104	; 0x68
 8001e70:	e7f4      	b.n	8001e5c <__sfp+0x18>
 8001e72:	2104      	movs	r1, #4
 8001e74:	4638      	mov	r0, r7
 8001e76:	f7ff ff9f 	bl	8001db8 <__sfmoreglue>
 8001e7a:	6030      	str	r0, [r6, #0]
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d1f1      	bne.n	8001e64 <__sfp+0x20>
 8001e80:	230c      	movs	r3, #12
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4604      	mov	r4, r0
 8001e86:	4620      	mov	r0, r4
 8001e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <__sfp+0x74>)
 8001e8c:	6665      	str	r5, [r4, #100]	; 0x64
 8001e8e:	e9c4 5500 	strd	r5, r5, [r4]
 8001e92:	60a5      	str	r5, [r4, #8]
 8001e94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001e98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ea4:	f7ff fd82 	bl	80019ac <memset>
 8001ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001eb0:	e7e9      	b.n	8001e86 <__sfp+0x42>
 8001eb2:	bf00      	nop
 8001eb4:	080022c0 	.word	0x080022c0
 8001eb8:	ffff0001 	.word	0xffff0001

08001ebc <_fwalk_reent>:
 8001ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ec0:	4680      	mov	r8, r0
 8001ec2:	4689      	mov	r9, r1
 8001ec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ec8:	2600      	movs	r6, #0
 8001eca:	b914      	cbnz	r4, 8001ed2 <_fwalk_reent+0x16>
 8001ecc:	4630      	mov	r0, r6
 8001ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ed2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001ed6:	3f01      	subs	r7, #1
 8001ed8:	d501      	bpl.n	8001ede <_fwalk_reent+0x22>
 8001eda:	6824      	ldr	r4, [r4, #0]
 8001edc:	e7f5      	b.n	8001eca <_fwalk_reent+0xe>
 8001ede:	89ab      	ldrh	r3, [r5, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d907      	bls.n	8001ef4 <_fwalk_reent+0x38>
 8001ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	d003      	beq.n	8001ef4 <_fwalk_reent+0x38>
 8001eec:	4629      	mov	r1, r5
 8001eee:	4640      	mov	r0, r8
 8001ef0:	47c8      	blx	r9
 8001ef2:	4306      	orrs	r6, r0
 8001ef4:	3568      	adds	r5, #104	; 0x68
 8001ef6:	e7ee      	b.n	8001ed6 <_fwalk_reent+0x1a>

08001ef8 <__swhatbuf_r>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	460e      	mov	r6, r1
 8001efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f00:	2900      	cmp	r1, #0
 8001f02:	b096      	sub	sp, #88	; 0x58
 8001f04:	4614      	mov	r4, r2
 8001f06:	461d      	mov	r5, r3
 8001f08:	da07      	bge.n	8001f1a <__swhatbuf_r+0x22>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	602b      	str	r3, [r5, #0]
 8001f0e:	89b3      	ldrh	r3, [r6, #12]
 8001f10:	061a      	lsls	r2, r3, #24
 8001f12:	d410      	bmi.n	8001f36 <__swhatbuf_r+0x3e>
 8001f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f18:	e00e      	b.n	8001f38 <__swhatbuf_r+0x40>
 8001f1a:	466a      	mov	r2, sp
 8001f1c:	f000 f96e 	bl	80021fc <_fstat_r>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	dbf2      	blt.n	8001f0a <__swhatbuf_r+0x12>
 8001f24:	9a01      	ldr	r2, [sp, #4]
 8001f26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f2e:	425a      	negs	r2, r3
 8001f30:	415a      	adcs	r2, r3
 8001f32:	602a      	str	r2, [r5, #0]
 8001f34:	e7ee      	b.n	8001f14 <__swhatbuf_r+0x1c>
 8001f36:	2340      	movs	r3, #64	; 0x40
 8001f38:	2000      	movs	r0, #0
 8001f3a:	6023      	str	r3, [r4, #0]
 8001f3c:	b016      	add	sp, #88	; 0x58
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}

08001f40 <__smakebuf_r>:
 8001f40:	898b      	ldrh	r3, [r1, #12]
 8001f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f44:	079d      	lsls	r5, r3, #30
 8001f46:	4606      	mov	r6, r0
 8001f48:	460c      	mov	r4, r1
 8001f4a:	d507      	bpl.n	8001f5c <__smakebuf_r+0x1c>
 8001f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	6123      	str	r3, [r4, #16]
 8001f54:	2301      	movs	r3, #1
 8001f56:	6163      	str	r3, [r4, #20]
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
 8001f5c:	ab01      	add	r3, sp, #4
 8001f5e:	466a      	mov	r2, sp
 8001f60:	f7ff ffca 	bl	8001ef8 <__swhatbuf_r>
 8001f64:	9900      	ldr	r1, [sp, #0]
 8001f66:	4605      	mov	r5, r0
 8001f68:	4630      	mov	r0, r6
 8001f6a:	f000 f877 	bl	800205c <_malloc_r>
 8001f6e:	b948      	cbnz	r0, 8001f84 <__smakebuf_r+0x44>
 8001f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f74:	059a      	lsls	r2, r3, #22
 8001f76:	d4ef      	bmi.n	8001f58 <__smakebuf_r+0x18>
 8001f78:	f023 0303 	bic.w	r3, r3, #3
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	81a3      	strh	r3, [r4, #12]
 8001f82:	e7e3      	b.n	8001f4c <__smakebuf_r+0xc>
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <__smakebuf_r+0x7c>)
 8001f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	6020      	str	r0, [r4, #0]
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	81a3      	strh	r3, [r4, #12]
 8001f92:	9b00      	ldr	r3, [sp, #0]
 8001f94:	6163      	str	r3, [r4, #20]
 8001f96:	9b01      	ldr	r3, [sp, #4]
 8001f98:	6120      	str	r0, [r4, #16]
 8001f9a:	b15b      	cbz	r3, 8001fb4 <__smakebuf_r+0x74>
 8001f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	f000 f93d 	bl	8002220 <_isatty_r>
 8001fa6:	b128      	cbz	r0, 8001fb4 <__smakebuf_r+0x74>
 8001fa8:	89a3      	ldrh	r3, [r4, #12]
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	81a3      	strh	r3, [r4, #12]
 8001fb4:	89a3      	ldrh	r3, [r4, #12]
 8001fb6:	431d      	orrs	r5, r3
 8001fb8:	81a5      	strh	r5, [r4, #12]
 8001fba:	e7cd      	b.n	8001f58 <__smakebuf_r+0x18>
 8001fbc:	08001dad 	.word	0x08001dad

08001fc0 <_free_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4605      	mov	r5, r0
 8001fc4:	2900      	cmp	r1, #0
 8001fc6:	d045      	beq.n	8002054 <_free_r+0x94>
 8001fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fcc:	1f0c      	subs	r4, r1, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bfb8      	it	lt
 8001fd2:	18e4      	addlt	r4, r4, r3
 8001fd4:	f000 f946 	bl	8002264 <__malloc_lock>
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <_free_r+0x98>)
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	4610      	mov	r0, r2
 8001fde:	b933      	cbnz	r3, 8001fee <_free_r+0x2e>
 8001fe0:	6063      	str	r3, [r4, #4]
 8001fe2:	6014      	str	r4, [r2, #0]
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fea:	f000 b93c 	b.w	8002266 <__malloc_unlock>
 8001fee:	42a3      	cmp	r3, r4
 8001ff0:	d90c      	bls.n	800200c <_free_r+0x4c>
 8001ff2:	6821      	ldr	r1, [r4, #0]
 8001ff4:	1862      	adds	r2, r4, r1
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	bf04      	itt	eq
 8001ffa:	681a      	ldreq	r2, [r3, #0]
 8001ffc:	685b      	ldreq	r3, [r3, #4]
 8001ffe:	6063      	str	r3, [r4, #4]
 8002000:	bf04      	itt	eq
 8002002:	1852      	addeq	r2, r2, r1
 8002004:	6022      	streq	r2, [r4, #0]
 8002006:	6004      	str	r4, [r0, #0]
 8002008:	e7ec      	b.n	8001fe4 <_free_r+0x24>
 800200a:	4613      	mov	r3, r2
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	b10a      	cbz	r2, 8002014 <_free_r+0x54>
 8002010:	42a2      	cmp	r2, r4
 8002012:	d9fa      	bls.n	800200a <_free_r+0x4a>
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	1858      	adds	r0, r3, r1
 8002018:	42a0      	cmp	r0, r4
 800201a:	d10b      	bne.n	8002034 <_free_r+0x74>
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	4401      	add	r1, r0
 8002020:	1858      	adds	r0, r3, r1
 8002022:	4282      	cmp	r2, r0
 8002024:	6019      	str	r1, [r3, #0]
 8002026:	d1dd      	bne.n	8001fe4 <_free_r+0x24>
 8002028:	6810      	ldr	r0, [r2, #0]
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	4401      	add	r1, r0
 8002030:	6019      	str	r1, [r3, #0]
 8002032:	e7d7      	b.n	8001fe4 <_free_r+0x24>
 8002034:	d902      	bls.n	800203c <_free_r+0x7c>
 8002036:	230c      	movs	r3, #12
 8002038:	602b      	str	r3, [r5, #0]
 800203a:	e7d3      	b.n	8001fe4 <_free_r+0x24>
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	1821      	adds	r1, r4, r0
 8002040:	428a      	cmp	r2, r1
 8002042:	bf04      	itt	eq
 8002044:	6811      	ldreq	r1, [r2, #0]
 8002046:	6852      	ldreq	r2, [r2, #4]
 8002048:	6062      	str	r2, [r4, #4]
 800204a:	bf04      	itt	eq
 800204c:	1809      	addeq	r1, r1, r0
 800204e:	6021      	streq	r1, [r4, #0]
 8002050:	605c      	str	r4, [r3, #4]
 8002052:	e7c7      	b.n	8001fe4 <_free_r+0x24>
 8002054:	bd38      	pop	{r3, r4, r5, pc}
 8002056:	bf00      	nop
 8002058:	20000090 	.word	0x20000090

0800205c <_malloc_r>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	1ccd      	adds	r5, r1, #3
 8002060:	f025 0503 	bic.w	r5, r5, #3
 8002064:	3508      	adds	r5, #8
 8002066:	2d0c      	cmp	r5, #12
 8002068:	bf38      	it	cc
 800206a:	250c      	movcc	r5, #12
 800206c:	2d00      	cmp	r5, #0
 800206e:	4606      	mov	r6, r0
 8002070:	db01      	blt.n	8002076 <_malloc_r+0x1a>
 8002072:	42a9      	cmp	r1, r5
 8002074:	d903      	bls.n	800207e <_malloc_r+0x22>
 8002076:	230c      	movs	r3, #12
 8002078:	6033      	str	r3, [r6, #0]
 800207a:	2000      	movs	r0, #0
 800207c:	bd70      	pop	{r4, r5, r6, pc}
 800207e:	f000 f8f1 	bl	8002264 <__malloc_lock>
 8002082:	4a21      	ldr	r2, [pc, #132]	; (8002108 <_malloc_r+0xac>)
 8002084:	6814      	ldr	r4, [r2, #0]
 8002086:	4621      	mov	r1, r4
 8002088:	b991      	cbnz	r1, 80020b0 <_malloc_r+0x54>
 800208a:	4c20      	ldr	r4, [pc, #128]	; (800210c <_malloc_r+0xb0>)
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	b91b      	cbnz	r3, 8002098 <_malloc_r+0x3c>
 8002090:	4630      	mov	r0, r6
 8002092:	f000 f83d 	bl	8002110 <_sbrk_r>
 8002096:	6020      	str	r0, [r4, #0]
 8002098:	4629      	mov	r1, r5
 800209a:	4630      	mov	r0, r6
 800209c:	f000 f838 	bl	8002110 <_sbrk_r>
 80020a0:	1c43      	adds	r3, r0, #1
 80020a2:	d124      	bne.n	80020ee <_malloc_r+0x92>
 80020a4:	230c      	movs	r3, #12
 80020a6:	6033      	str	r3, [r6, #0]
 80020a8:	4630      	mov	r0, r6
 80020aa:	f000 f8dc 	bl	8002266 <__malloc_unlock>
 80020ae:	e7e4      	b.n	800207a <_malloc_r+0x1e>
 80020b0:	680b      	ldr	r3, [r1, #0]
 80020b2:	1b5b      	subs	r3, r3, r5
 80020b4:	d418      	bmi.n	80020e8 <_malloc_r+0x8c>
 80020b6:	2b0b      	cmp	r3, #11
 80020b8:	d90f      	bls.n	80020da <_malloc_r+0x7e>
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	50cd      	str	r5, [r1, r3]
 80020be:	18cc      	adds	r4, r1, r3
 80020c0:	4630      	mov	r0, r6
 80020c2:	f000 f8d0 	bl	8002266 <__malloc_unlock>
 80020c6:	f104 000b 	add.w	r0, r4, #11
 80020ca:	1d23      	adds	r3, r4, #4
 80020cc:	f020 0007 	bic.w	r0, r0, #7
 80020d0:	1ac3      	subs	r3, r0, r3
 80020d2:	d0d3      	beq.n	800207c <_malloc_r+0x20>
 80020d4:	425a      	negs	r2, r3
 80020d6:	50e2      	str	r2, [r4, r3]
 80020d8:	e7d0      	b.n	800207c <_malloc_r+0x20>
 80020da:	428c      	cmp	r4, r1
 80020dc:	684b      	ldr	r3, [r1, #4]
 80020de:	bf16      	itet	ne
 80020e0:	6063      	strne	r3, [r4, #4]
 80020e2:	6013      	streq	r3, [r2, #0]
 80020e4:	460c      	movne	r4, r1
 80020e6:	e7eb      	b.n	80020c0 <_malloc_r+0x64>
 80020e8:	460c      	mov	r4, r1
 80020ea:	6849      	ldr	r1, [r1, #4]
 80020ec:	e7cc      	b.n	8002088 <_malloc_r+0x2c>
 80020ee:	1cc4      	adds	r4, r0, #3
 80020f0:	f024 0403 	bic.w	r4, r4, #3
 80020f4:	42a0      	cmp	r0, r4
 80020f6:	d005      	beq.n	8002104 <_malloc_r+0xa8>
 80020f8:	1a21      	subs	r1, r4, r0
 80020fa:	4630      	mov	r0, r6
 80020fc:	f000 f808 	bl	8002110 <_sbrk_r>
 8002100:	3001      	adds	r0, #1
 8002102:	d0cf      	beq.n	80020a4 <_malloc_r+0x48>
 8002104:	6025      	str	r5, [r4, #0]
 8002106:	e7db      	b.n	80020c0 <_malloc_r+0x64>
 8002108:	20000090 	.word	0x20000090
 800210c:	20000094 	.word	0x20000094

08002110 <_sbrk_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4c06      	ldr	r4, [pc, #24]	; (800212c <_sbrk_r+0x1c>)
 8002114:	2300      	movs	r3, #0
 8002116:	4605      	mov	r5, r0
 8002118:	4608      	mov	r0, r1
 800211a:	6023      	str	r3, [r4, #0]
 800211c:	f7ff fbb0 	bl	8001880 <_sbrk>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d102      	bne.n	800212a <_sbrk_r+0x1a>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	b103      	cbz	r3, 800212a <_sbrk_r+0x1a>
 8002128:	602b      	str	r3, [r5, #0]
 800212a:	bd38      	pop	{r3, r4, r5, pc}
 800212c:	2000009c 	.word	0x2000009c

08002130 <__sread>:
 8002130:	b510      	push	{r4, lr}
 8002132:	460c      	mov	r4, r1
 8002134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002138:	f000 f896 	bl	8002268 <_read_r>
 800213c:	2800      	cmp	r0, #0
 800213e:	bfab      	itete	ge
 8002140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002142:	89a3      	ldrhlt	r3, [r4, #12]
 8002144:	181b      	addge	r3, r3, r0
 8002146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800214a:	bfac      	ite	ge
 800214c:	6563      	strge	r3, [r4, #84]	; 0x54
 800214e:	81a3      	strhlt	r3, [r4, #12]
 8002150:	bd10      	pop	{r4, pc}

08002152 <__swrite>:
 8002152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002156:	461f      	mov	r7, r3
 8002158:	898b      	ldrh	r3, [r1, #12]
 800215a:	05db      	lsls	r3, r3, #23
 800215c:	4605      	mov	r5, r0
 800215e:	460c      	mov	r4, r1
 8002160:	4616      	mov	r6, r2
 8002162:	d505      	bpl.n	8002170 <__swrite+0x1e>
 8002164:	2302      	movs	r3, #2
 8002166:	2200      	movs	r2, #0
 8002168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800216c:	f000 f868 	bl	8002240 <_lseek_r>
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800217a:	81a3      	strh	r3, [r4, #12]
 800217c:	4632      	mov	r2, r6
 800217e:	463b      	mov	r3, r7
 8002180:	4628      	mov	r0, r5
 8002182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002186:	f000 b817 	b.w	80021b8 <_write_r>

0800218a <__sseek>:
 800218a:	b510      	push	{r4, lr}
 800218c:	460c      	mov	r4, r1
 800218e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002192:	f000 f855 	bl	8002240 <_lseek_r>
 8002196:	1c43      	adds	r3, r0, #1
 8002198:	89a3      	ldrh	r3, [r4, #12]
 800219a:	bf15      	itete	ne
 800219c:	6560      	strne	r0, [r4, #84]	; 0x54
 800219e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021a6:	81a3      	strheq	r3, [r4, #12]
 80021a8:	bf18      	it	ne
 80021aa:	81a3      	strhne	r3, [r4, #12]
 80021ac:	bd10      	pop	{r4, pc}

080021ae <__sclose>:
 80021ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021b2:	f000 b813 	b.w	80021dc <_close_r>
	...

080021b8 <_write_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4c07      	ldr	r4, [pc, #28]	; (80021d8 <_write_r+0x20>)
 80021bc:	4605      	mov	r5, r0
 80021be:	4608      	mov	r0, r1
 80021c0:	4611      	mov	r1, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	6022      	str	r2, [r4, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f7ff fb09 	bl	80017de <_write>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_write_r+0x1e>
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_write_r+0x1e>
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	2000009c 	.word	0x2000009c

080021dc <_close_r>:
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4c06      	ldr	r4, [pc, #24]	; (80021f8 <_close_r+0x1c>)
 80021e0:	2300      	movs	r3, #0
 80021e2:	4605      	mov	r5, r0
 80021e4:	4608      	mov	r0, r1
 80021e6:	6023      	str	r3, [r4, #0]
 80021e8:	f7ff fb15 	bl	8001816 <_close>
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	d102      	bne.n	80021f6 <_close_r+0x1a>
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	b103      	cbz	r3, 80021f6 <_close_r+0x1a>
 80021f4:	602b      	str	r3, [r5, #0]
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
 80021f8:	2000009c 	.word	0x2000009c

080021fc <_fstat_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4c07      	ldr	r4, [pc, #28]	; (800221c <_fstat_r+0x20>)
 8002200:	2300      	movs	r3, #0
 8002202:	4605      	mov	r5, r0
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	6023      	str	r3, [r4, #0]
 800220a:	f7ff fb10 	bl	800182e <_fstat>
 800220e:	1c43      	adds	r3, r0, #1
 8002210:	d102      	bne.n	8002218 <_fstat_r+0x1c>
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	b103      	cbz	r3, 8002218 <_fstat_r+0x1c>
 8002216:	602b      	str	r3, [r5, #0]
 8002218:	bd38      	pop	{r3, r4, r5, pc}
 800221a:	bf00      	nop
 800221c:	2000009c 	.word	0x2000009c

08002220 <_isatty_r>:
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	4c06      	ldr	r4, [pc, #24]	; (800223c <_isatty_r+0x1c>)
 8002224:	2300      	movs	r3, #0
 8002226:	4605      	mov	r5, r0
 8002228:	4608      	mov	r0, r1
 800222a:	6023      	str	r3, [r4, #0]
 800222c:	f7ff fb0f 	bl	800184e <_isatty>
 8002230:	1c43      	adds	r3, r0, #1
 8002232:	d102      	bne.n	800223a <_isatty_r+0x1a>
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	b103      	cbz	r3, 800223a <_isatty_r+0x1a>
 8002238:	602b      	str	r3, [r5, #0]
 800223a:	bd38      	pop	{r3, r4, r5, pc}
 800223c:	2000009c 	.word	0x2000009c

08002240 <_lseek_r>:
 8002240:	b538      	push	{r3, r4, r5, lr}
 8002242:	4c07      	ldr	r4, [pc, #28]	; (8002260 <_lseek_r+0x20>)
 8002244:	4605      	mov	r5, r0
 8002246:	4608      	mov	r0, r1
 8002248:	4611      	mov	r1, r2
 800224a:	2200      	movs	r2, #0
 800224c:	6022      	str	r2, [r4, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	f7ff fb08 	bl	8001864 <_lseek>
 8002254:	1c43      	adds	r3, r0, #1
 8002256:	d102      	bne.n	800225e <_lseek_r+0x1e>
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	b103      	cbz	r3, 800225e <_lseek_r+0x1e>
 800225c:	602b      	str	r3, [r5, #0]
 800225e:	bd38      	pop	{r3, r4, r5, pc}
 8002260:	2000009c 	.word	0x2000009c

08002264 <__malloc_lock>:
 8002264:	4770      	bx	lr

08002266 <__malloc_unlock>:
 8002266:	4770      	bx	lr

08002268 <_read_r>:
 8002268:	b538      	push	{r3, r4, r5, lr}
 800226a:	4c07      	ldr	r4, [pc, #28]	; (8002288 <_read_r+0x20>)
 800226c:	4605      	mov	r5, r0
 800226e:	4608      	mov	r0, r1
 8002270:	4611      	mov	r1, r2
 8002272:	2200      	movs	r2, #0
 8002274:	6022      	str	r2, [r4, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	f7ff fa94 	bl	80017a4 <_read>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d102      	bne.n	8002286 <_read_r+0x1e>
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	b103      	cbz	r3, 8002286 <_read_r+0x1e>
 8002284:	602b      	str	r3, [r5, #0]
 8002286:	bd38      	pop	{r3, r4, r5, pc}
 8002288:	2000009c 	.word	0x2000009c

0800228c <_init>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

08002298 <_fini>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	bf00      	nop
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr
