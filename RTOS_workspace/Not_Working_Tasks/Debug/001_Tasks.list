
001_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005038  08005038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800503c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e18  20000078  080050b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e90  080050b4  00022e90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012121  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028cf  00000000  00000000  000321c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00034a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  000359a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022f92  00000000  00000000  00036780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c29f  00000000  00000000  00059712  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0cb5  00000000  00000000  000659b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004368  00000000  00000000  001366e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f40 	.word	0x08004f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004f40 	.word	0x08004f40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8d8 	bl	80006ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f001 fbe8 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f001 fbbe 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000004 	.word	0x20000004
 8000538:	20012e08 	.word	0x20012e08

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20012e08 	.word	0x20012e08

08000554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0b      	blt.n	80005e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_EnableIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff4c 	bl	8000554 <__NVIC_SetPriorityGrouping>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006d6:	f7ff ff61 	bl	800059c <__NVIC_GetPriorityGrouping>
 80006da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	6978      	ldr	r0, [r7, #20]
 80006e2:	f7ff ffb1 	bl	8000648 <NVIC_EncodePriority>
 80006e6:	4602      	mov	r2, r0
 80006e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff80 	bl	80005f4 <__NVIC_SetPriority>
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff54 	bl	80005b8 <__NVIC_EnableIRQ>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	e16b      	b.n	8000a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000734:	2201      	movs	r2, #1
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	429a      	cmp	r2, r3
 800074e:	f040 815a 	bne.w	8000a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d00b      	beq.n	8000772 <HAL_GPIO_Init+0x5a>
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d007      	beq.n	8000772 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000766:	2b11      	cmp	r3, #17
 8000768:	d003      	beq.n	8000772 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b12      	cmp	r3, #18
 8000770:	d130      	bne.n	80007d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	2203      	movs	r2, #3
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	69ba      	ldr	r2, [r7, #24]
 8000786:	4013      	ands	r3, r2
 8000788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	4313      	orrs	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007a8:	2201      	movs	r2, #1
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	4013      	ands	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	091b      	lsrs	r3, r3, #4
 80007be:	f003 0201 	and.w	r2, r3, #1
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	2203      	movs	r2, #3
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d003      	beq.n	8000814 <HAL_GPIO_Init+0xfc>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b12      	cmp	r3, #18
 8000812:	d123      	bne.n	800085c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	08da      	lsrs	r2, r3, #3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3208      	adds	r2, #8
 800081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	220f      	movs	r2, #15
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4013      	ands	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	691a      	ldr	r2, [r3, #16]
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	4313      	orrs	r3, r2
 800084c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	08da      	lsrs	r2, r3, #3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3208      	adds	r2, #8
 8000856:	69b9      	ldr	r1, [r7, #24]
 8000858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 0203 	and.w	r2, r3, #3
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000898:	2b00      	cmp	r3, #0
 800089a:	f000 80b4 	beq.w	8000a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <HAL_GPIO_Init+0x308>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a5e      	ldr	r2, [pc, #376]	; (8000a20 <HAL_GPIO_Init+0x308>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b5c      	ldr	r3, [pc, #368]	; (8000a20 <HAL_GPIO_Init+0x308>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008ba:	4a5a      	ldr	r2, [pc, #360]	; (8000a24 <HAL_GPIO_Init+0x30c>)
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	3302      	adds	r3, #2
 80008c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	220f      	movs	r2, #15
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4013      	ands	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a51      	ldr	r2, [pc, #324]	; (8000a28 <HAL_GPIO_Init+0x310>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d02b      	beq.n	800093e <HAL_GPIO_Init+0x226>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a50      	ldr	r2, [pc, #320]	; (8000a2c <HAL_GPIO_Init+0x314>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d025      	beq.n	800093a <HAL_GPIO_Init+0x222>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a4f      	ldr	r2, [pc, #316]	; (8000a30 <HAL_GPIO_Init+0x318>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d01f      	beq.n	8000936 <HAL_GPIO_Init+0x21e>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a4e      	ldr	r2, [pc, #312]	; (8000a34 <HAL_GPIO_Init+0x31c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d019      	beq.n	8000932 <HAL_GPIO_Init+0x21a>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a4d      	ldr	r2, [pc, #308]	; (8000a38 <HAL_GPIO_Init+0x320>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d013      	beq.n	800092e <HAL_GPIO_Init+0x216>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a4c      	ldr	r2, [pc, #304]	; (8000a3c <HAL_GPIO_Init+0x324>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d00d      	beq.n	800092a <HAL_GPIO_Init+0x212>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a4b      	ldr	r2, [pc, #300]	; (8000a40 <HAL_GPIO_Init+0x328>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d007      	beq.n	8000926 <HAL_GPIO_Init+0x20e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4a      	ldr	r2, [pc, #296]	; (8000a44 <HAL_GPIO_Init+0x32c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_GPIO_Init+0x20a>
 800091e:	2307      	movs	r3, #7
 8000920:	e00e      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000922:	2308      	movs	r3, #8
 8000924:	e00c      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000926:	2306      	movs	r3, #6
 8000928:	e00a      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800092a:	2305      	movs	r3, #5
 800092c:	e008      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800092e:	2304      	movs	r3, #4
 8000930:	e006      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000932:	2303      	movs	r3, #3
 8000934:	e004      	b.n	8000940 <HAL_GPIO_Init+0x228>
 8000936:	2302      	movs	r3, #2
 8000938:	e002      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800093a:	2301      	movs	r3, #1
 800093c:	e000      	b.n	8000940 <HAL_GPIO_Init+0x228>
 800093e:	2300      	movs	r3, #0
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	f002 0203 	and.w	r2, r2, #3
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	4093      	lsls	r3, r2
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000950:	4934      	ldr	r1, [pc, #208]	; (8000a24 <HAL_GPIO_Init+0x30c>)
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	3302      	adds	r3, #2
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800095e:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <HAL_GPIO_Init+0x330>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	43db      	mvns	r3, r3
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	4013      	ands	r3, r2
 800096c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000982:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <HAL_GPIO_Init+0x330>)
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <HAL_GPIO_Init+0x330>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	43db      	mvns	r3, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4013      	ands	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	43db      	mvns	r3, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_GPIO_Init+0x330>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a00:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <HAL_GPIO_Init+0x330>)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	2b0f      	cmp	r3, #15
 8000a10:	f67f ae90 	bls.w	8000734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a14:	bf00      	nop
 8000a16:	3724      	adds	r7, #36	; 0x24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40013800 	.word	0x40013800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40021400 	.word	0x40021400
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40021c00 	.word	0x40021c00
 8000a48:	40013c00 	.word	0x40013c00

08000a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	807b      	strh	r3, [r7, #2]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a5c:	787b      	ldrb	r3, [r7, #1]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a62:	887a      	ldrh	r2, [r7, #2]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a68:	e003      	b.n	8000a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	041a      	lsls	r2, r3, #16
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	619a      	str	r2, [r3, #24]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e25b      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d075      	beq.n	8000b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a9e:	4ba3      	ldr	r3, [pc, #652]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d00c      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aaa:	4ba0      	ldr	r3, [pc, #640]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d112      	bne.n	8000adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ab6:	4b9d      	ldr	r3, [pc, #628]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ac2:	d10b      	bne.n	8000adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac4:	4b99      	ldr	r3, [pc, #612]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d05b      	beq.n	8000b88 <HAL_RCC_OscConfig+0x108>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d157      	bne.n	8000b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e236      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae4:	d106      	bne.n	8000af4 <HAL_RCC_OscConfig+0x74>
 8000ae6:	4b91      	ldr	r3, [pc, #580]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a90      	ldr	r2, [pc, #576]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e01d      	b.n	8000b30 <HAL_RCC_OscConfig+0xb0>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000afc:	d10c      	bne.n	8000b18 <HAL_RCC_OscConfig+0x98>
 8000afe:	4b8b      	ldr	r3, [pc, #556]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a8a      	ldr	r2, [pc, #552]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b88      	ldr	r3, [pc, #544]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a87      	ldr	r2, [pc, #540]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e00b      	b.n	8000b30 <HAL_RCC_OscConfig+0xb0>
 8000b18:	4b84      	ldr	r3, [pc, #528]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a83      	ldr	r2, [pc, #524]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b81      	ldr	r3, [pc, #516]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a80      	ldr	r2, [pc, #512]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d013      	beq.n	8000b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b38:	f7ff fd00 	bl	800053c <HAL_GetTick>
 8000b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3e:	e008      	b.n	8000b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b40:	f7ff fcfc 	bl	800053c <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	2b64      	cmp	r3, #100	; 0x64
 8000b4c:	d901      	bls.n	8000b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e1fb      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	4b76      	ldr	r3, [pc, #472]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f0      	beq.n	8000b40 <HAL_RCC_OscConfig+0xc0>
 8000b5e:	e014      	b.n	8000b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b60:	f7ff fcec 	bl	800053c <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b68:	f7ff fce8 	bl	800053c <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b64      	cmp	r3, #100	; 0x64
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e1e7      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b7a:	4b6c      	ldr	r3, [pc, #432]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1f0      	bne.n	8000b68 <HAL_RCC_OscConfig+0xe8>
 8000b86:	e000      	b.n	8000b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d063      	beq.n	8000c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b96:	4b65      	ldr	r3, [pc, #404]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00b      	beq.n	8000bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d11c      	bne.n	8000be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d116      	bne.n	8000be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bba:	4b5c      	ldr	r3, [pc, #368]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d005      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x152>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d001      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e1bb      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd2:	4b56      	ldr	r3, [pc, #344]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4952      	ldr	r1, [pc, #328]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be6:	e03a      	b.n	8000c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d020      	beq.n	8000c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	4b4f      	ldr	r3, [pc, #316]	; (8000d30 <HAL_RCC_OscConfig+0x2b0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fca1 	bl	800053c <HAL_GetTick>
 8000bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfc:	e008      	b.n	8000c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bfe:	f7ff fc9d 	bl	800053c <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d901      	bls.n	8000c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e19c      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c10:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f0      	beq.n	8000bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1c:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4940      	ldr	r1, [pc, #256]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
 8000c30:	e015      	b.n	8000c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c32:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <HAL_RCC_OscConfig+0x2b0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c38:	f7ff fc80 	bl	800053c <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c40:	f7ff fc7c 	bl	800053c <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e17b      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d030      	beq.n	8000ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d016      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_RCC_OscConfig+0x2b4>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c78:	f7ff fc60 	bl	800053c <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c80:	f7ff fc5c 	bl	800053c <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e15b      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0x200>
 8000c9e:	e015      	b.n	8000ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_RCC_OscConfig+0x2b4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fc49 	bl	800053c <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cac:	e008      	b.n	8000cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cae:	f7ff fc45 	bl	800053c <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e144      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f0      	bne.n	8000cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80a0 	beq.w	8000e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10f      	bne.n	8000d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d06:	2301      	movs	r3, #1
 8000d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_RCC_OscConfig+0x2b8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d121      	bne.n	8000d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_RCC_OscConfig+0x2b8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_RCC_OscConfig+0x2b8>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d22:	f7ff fc0b 	bl	800053c <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d28:	e011      	b.n	8000d4e <HAL_RCC_OscConfig+0x2ce>
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	42470000 	.word	0x42470000
 8000d34:	42470e80 	.word	0x42470e80
 8000d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d3c:	f7ff fbfe 	bl	800053c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e0fd      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4e:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <HAL_RCC_OscConfig+0x4d4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f0      	beq.n	8000d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d106      	bne.n	8000d70 <HAL_RCC_OscConfig+0x2f0>
 8000d62:	4b7d      	ldr	r3, [pc, #500]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d66:	4a7c      	ldr	r2, [pc, #496]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d6e:	e01c      	b.n	8000daa <HAL_RCC_OscConfig+0x32a>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d10c      	bne.n	8000d92 <HAL_RCC_OscConfig+0x312>
 8000d78:	4b77      	ldr	r3, [pc, #476]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d7c:	4a76      	ldr	r2, [pc, #472]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6713      	str	r3, [r2, #112]	; 0x70
 8000d84:	4b74      	ldr	r3, [pc, #464]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d88:	4a73      	ldr	r2, [pc, #460]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000d90:	e00b      	b.n	8000daa <HAL_RCC_OscConfig+0x32a>
 8000d92:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d96:	4a70      	ldr	r2, [pc, #448]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000d98:	f023 0301 	bic.w	r3, r3, #1
 8000d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d9e:	4b6e      	ldr	r3, [pc, #440]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da2:	4a6d      	ldr	r2, [pc, #436]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000da4:	f023 0304 	bic.w	r3, r3, #4
 8000da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d015      	beq.n	8000dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db2:	f7ff fbc3 	bl	800053c <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db8:	e00a      	b.n	8000dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dba:	f7ff fbbf 	bl	800053c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d901      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e0bc      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd0:	4b61      	ldr	r3, [pc, #388]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0ee      	beq.n	8000dba <HAL_RCC_OscConfig+0x33a>
 8000ddc:	e014      	b.n	8000e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dde:	f7ff fbad 	bl	800053c <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de4:	e00a      	b.n	8000dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de6:	f7ff fba9 	bl	800053c <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e0a6      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dfc:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1ee      	bne.n	8000de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d105      	bne.n	8000e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e0e:	4b52      	ldr	r3, [pc, #328]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a51      	ldr	r2, [pc, #324]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8092 	beq.w	8000f48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e24:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d05c      	beq.n	8000eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d141      	bne.n	8000ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e38:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_RCC_OscConfig+0x4dc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fb7d 	bl	800053c <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e46:	f7ff fb79 	bl	800053c <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e078      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e58:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f0      	bne.n	8000e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69da      	ldr	r2, [r3, #28]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	019b      	lsls	r3, r3, #6
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	041b      	lsls	r3, r3, #16
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	061b      	lsls	r3, r3, #24
 8000e88:	4933      	ldr	r1, [pc, #204]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <HAL_RCC_OscConfig+0x4dc>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fb52 	bl	800053c <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9c:	f7ff fb4e 	bl	800053c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e04d      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0x41c>
 8000eba:	e045      	b.n	8000f48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_RCC_OscConfig+0x4dc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fb3b 	bl	800053c <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eca:	f7ff fb37 	bl	800053c <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e036      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x44a>
 8000ee8:	e02e      	b.n	8000f48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e029      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_RCC_OscConfig+0x4d8>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d11c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d115      	bne.n	8000f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f1e:	4013      	ands	r3, r2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d10d      	bne.n	8000f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d106      	bne.n	8000f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d001      	beq.n	8000f48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40007000 	.word	0x40007000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	42470060 	.word	0x42470060

08000f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0cc      	b.n	800110e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f74:	4b68      	ldr	r3, [pc, #416]	; (8001118 <HAL_RCC_ClockConfig+0x1b8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d90c      	bls.n	8000f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <HAL_RCC_ClockConfig+0x1b8>)
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d001      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0b8      	b.n	800110e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d020      	beq.n	8000fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a58      	ldr	r2, [pc, #352]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8000fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fd8:	4b50      	ldr	r3, [pc, #320]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	494d      	ldr	r1, [pc, #308]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d044      	beq.n	8001080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d107      	bne.n	800100e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d119      	bne.n	800103e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e07f      	b.n	800110e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d003      	beq.n	800101e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800101a:	2b03      	cmp	r3, #3
 800101c:	d107      	bne.n	800102e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d109      	bne.n	800103e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e06f      	b.n	800110e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102e:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e067      	b.n	800110e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f023 0203 	bic.w	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4934      	ldr	r1, [pc, #208]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 800104c:	4313      	orrs	r3, r2
 800104e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001050:	f7ff fa74 	bl	800053c <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001056:	e00a      	b.n	800106e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001058:	f7ff fa70 	bl	800053c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f241 3288 	movw	r2, #5000	; 0x1388
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e04f      	b.n	800110e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 020c 	and.w	r2, r3, #12
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	429a      	cmp	r2, r3
 800107e:	d1eb      	bne.n	8001058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_RCC_ClockConfig+0x1b8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d20c      	bcs.n	80010a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <HAL_RCC_ClockConfig+0x1b8>)
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_RCC_ClockConfig+0x1b8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e032      	b.n	800110e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4916      	ldr	r1, [pc, #88]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010e6:	f000 f821 	bl	800112c <HAL_RCC_GetSysClockFreq>
 80010ea:	4601      	mov	r1, r0
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	5cd3      	ldrb	r3, [r2, r3]
 80010fa:	fa21 f303 	lsr.w	r3, r1, r3
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_RCC_ClockConfig+0x1c8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fde4 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023c00 	.word	0x40023c00
 800111c:	40023800 	.word	0x40023800
 8001120:	08004fb0 	.word	0x08004fb0
 8001124:	20000008 	.word	0x20000008
 8001128:	20000000 	.word	0x20000000

0800112c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001142:	4b63      	ldr	r3, [pc, #396]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	d007      	beq.n	800115e <HAL_RCC_GetSysClockFreq+0x32>
 800114e:	2b08      	cmp	r3, #8
 8001150:	d008      	beq.n	8001164 <HAL_RCC_GetSysClockFreq+0x38>
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 80b4 	bne.w	80012c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001158:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800115a:	60bb      	str	r3, [r7, #8]
       break;
 800115c:	e0b3      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800115e:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001160:	60bb      	str	r3, [r7, #8]
      break;
 8001162:	e0b0      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001164:	4b5a      	ldr	r3, [pc, #360]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800116c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800116e:	4b58      	ldr	r3, [pc, #352]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d04a      	beq.n	8001210 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117a:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	099b      	lsrs	r3, r3, #6
 8001180:	f04f 0400 	mov.w	r4, #0
 8001184:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	ea03 0501 	and.w	r5, r3, r1
 8001190:	ea04 0602 	and.w	r6, r4, r2
 8001194:	4629      	mov	r1, r5
 8001196:	4632      	mov	r2, r6
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	f04f 0400 	mov.w	r4, #0
 80011a0:	0154      	lsls	r4, r2, #5
 80011a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011a6:	014b      	lsls	r3, r1, #5
 80011a8:	4619      	mov	r1, r3
 80011aa:	4622      	mov	r2, r4
 80011ac:	1b49      	subs	r1, r1, r5
 80011ae:	eb62 0206 	sbc.w	r2, r2, r6
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	f04f 0400 	mov.w	r4, #0
 80011ba:	0194      	lsls	r4, r2, #6
 80011bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011c0:	018b      	lsls	r3, r1, #6
 80011c2:	1a5b      	subs	r3, r3, r1
 80011c4:	eb64 0402 	sbc.w	r4, r4, r2
 80011c8:	f04f 0100 	mov.w	r1, #0
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	00e2      	lsls	r2, r4, #3
 80011d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011d6:	00d9      	lsls	r1, r3, #3
 80011d8:	460b      	mov	r3, r1
 80011da:	4614      	mov	r4, r2
 80011dc:	195b      	adds	r3, r3, r5
 80011de:	eb44 0406 	adc.w	r4, r4, r6
 80011e2:	f04f 0100 	mov.w	r1, #0
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	0262      	lsls	r2, r4, #9
 80011ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80011f0:	0259      	lsls	r1, r3, #9
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f04f 0400 	mov.w	r4, #0
 8001200:	461a      	mov	r2, r3
 8001202:	4623      	mov	r3, r4
 8001204:	f7fe ffe4 	bl	80001d0 <__aeabi_uldivmod>
 8001208:	4603      	mov	r3, r0
 800120a:	460c      	mov	r4, r1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	e049      	b.n	80012a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	f04f 0400 	mov.w	r4, #0
 800121a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	ea03 0501 	and.w	r5, r3, r1
 8001226:	ea04 0602 	and.w	r6, r4, r2
 800122a:	4629      	mov	r1, r5
 800122c:	4632      	mov	r2, r6
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	f04f 0400 	mov.w	r4, #0
 8001236:	0154      	lsls	r4, r2, #5
 8001238:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800123c:	014b      	lsls	r3, r1, #5
 800123e:	4619      	mov	r1, r3
 8001240:	4622      	mov	r2, r4
 8001242:	1b49      	subs	r1, r1, r5
 8001244:	eb62 0206 	sbc.w	r2, r2, r6
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	f04f 0400 	mov.w	r4, #0
 8001250:	0194      	lsls	r4, r2, #6
 8001252:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001256:	018b      	lsls	r3, r1, #6
 8001258:	1a5b      	subs	r3, r3, r1
 800125a:	eb64 0402 	sbc.w	r4, r4, r2
 800125e:	f04f 0100 	mov.w	r1, #0
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	00e2      	lsls	r2, r4, #3
 8001268:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800126c:	00d9      	lsls	r1, r3, #3
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	195b      	adds	r3, r3, r5
 8001274:	eb44 0406 	adc.w	r4, r4, r6
 8001278:	f04f 0100 	mov.w	r1, #0
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	02a2      	lsls	r2, r4, #10
 8001282:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001286:	0299      	lsls	r1, r3, #10
 8001288:	460b      	mov	r3, r1
 800128a:	4614      	mov	r4, r2
 800128c:	4618      	mov	r0, r3
 800128e:	4621      	mov	r1, r4
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f04f 0400 	mov.w	r4, #0
 8001296:	461a      	mov	r2, r3
 8001298:	4623      	mov	r3, r4
 800129a:	f7fe ff99 	bl	80001d0 <__aeabi_uldivmod>
 800129e:	4603      	mov	r3, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	0c1b      	lsrs	r3, r3, #16
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	3301      	adds	r3, #1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	60bb      	str	r3, [r7, #8]
      break;
 80012be:	e002      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012c2:	60bb      	str	r3, [r7, #8]
      break;
 80012c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012c6:	68bb      	ldr	r3, [r7, #8]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	00f42400 	.word	0x00f42400
 80012d8:	007a1200 	.word	0x007a1200

080012dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012f8:	f7ff fff0 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 80012fc:	4601      	mov	r1, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0a9b      	lsrs	r3, r3, #10
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	08004fc0 	.word	0x08004fc0

0800131c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	220f      	movs	r2, #15
 800132a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_RCC_GetClockConfig+0x60>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 020f 	and.w	r2, r3, #15
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	601a      	str	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e01d      	b.n	80013ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f815 	bl	80013d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3304      	adds	r3, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f000 f968 	bl	8001694 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0201 	orr.w	r2, r2, #1
 8001400:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b06      	cmp	r3, #6
 8001412:	d007      	beq.n	8001424 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b02      	cmp	r3, #2
 8001446:	d122      	bne.n	800148e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b02      	cmp	r3, #2
 8001454:	d11b      	bne.n	800148e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f06f 0202 	mvn.w	r2, #2
 800145e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f8ee 	bl	8001656 <HAL_TIM_IC_CaptureCallback>
 800147a:	e005      	b.n	8001488 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f8e0 	bl	8001642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f8f1 	bl	800166a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b04      	cmp	r3, #4
 800149a:	d122      	bne.n	80014e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d11b      	bne.n	80014e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f06f 0204 	mvn.w	r2, #4
 80014b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f8c4 	bl	8001656 <HAL_TIM_IC_CaptureCallback>
 80014ce:	e005      	b.n	80014dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f8b6 	bl	8001642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8c7 	bl	800166a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d122      	bne.n	8001536 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11b      	bne.n	8001536 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 0208 	mvn.w	r2, #8
 8001506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2204      	movs	r2, #4
 800150c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f89a 	bl	8001656 <HAL_TIM_IC_CaptureCallback>
 8001522:	e005      	b.n	8001530 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f88c 	bl	8001642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f89d 	bl	800166a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b10      	cmp	r3, #16
 8001542:	d122      	bne.n	800158a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b10      	cmp	r3, #16
 8001550:	d11b      	bne.n	800158a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 0210 	mvn.w	r2, #16
 800155a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2208      	movs	r2, #8
 8001560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f870 	bl	8001656 <HAL_TIM_IC_CaptureCallback>
 8001576:	e005      	b.n	8001584 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f862 	bl	8001642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f873 	bl	800166a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d10e      	bne.n	80015b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f06f 0201 	mvn.w	r2, #1
 80015ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 fb4d 	bl	8001c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b80      	cmp	r3, #128	; 0x80
 80015c2:	d10e      	bne.n	80015e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ce:	2b80      	cmp	r3, #128	; 0x80
 80015d0:	d107      	bne.n	80015e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f903 	bl	80017e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ec:	2b40      	cmp	r3, #64	; 0x40
 80015ee:	d10e      	bne.n	800160e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fa:	2b40      	cmp	r3, #64	; 0x40
 80015fc:	d107      	bne.n	800160e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f838 	bl	800167e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b20      	cmp	r3, #32
 800161a:	d10e      	bne.n	800163a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	2b20      	cmp	r3, #32
 8001628:	d107      	bne.n	800163a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f06f 0220 	mvn.w	r2, #32
 8001632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8cd 	bl	80017d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a40      	ldr	r2, [pc, #256]	; (80017a8 <TIM_Base_SetConfig+0x114>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d013      	beq.n	80016d4 <TIM_Base_SetConfig+0x40>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b2:	d00f      	beq.n	80016d4 <TIM_Base_SetConfig+0x40>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3d      	ldr	r2, [pc, #244]	; (80017ac <TIM_Base_SetConfig+0x118>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d00b      	beq.n	80016d4 <TIM_Base_SetConfig+0x40>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3c      	ldr	r2, [pc, #240]	; (80017b0 <TIM_Base_SetConfig+0x11c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d007      	beq.n	80016d4 <TIM_Base_SetConfig+0x40>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3b      	ldr	r2, [pc, #236]	; (80017b4 <TIM_Base_SetConfig+0x120>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d003      	beq.n	80016d4 <TIM_Base_SetConfig+0x40>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3a      	ldr	r2, [pc, #232]	; (80017b8 <TIM_Base_SetConfig+0x124>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d108      	bne.n	80016e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a2f      	ldr	r2, [pc, #188]	; (80017a8 <TIM_Base_SetConfig+0x114>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02b      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d027      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <TIM_Base_SetConfig+0x118>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d023      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <TIM_Base_SetConfig+0x11c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01f      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <TIM_Base_SetConfig+0x120>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01b      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <TIM_Base_SetConfig+0x124>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d017      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a28      	ldr	r2, [pc, #160]	; (80017bc <TIM_Base_SetConfig+0x128>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <TIM_Base_SetConfig+0x12c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00f      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <TIM_Base_SetConfig+0x130>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00b      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <TIM_Base_SetConfig+0x134>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a24      	ldr	r2, [pc, #144]	; (80017cc <TIM_Base_SetConfig+0x138>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d003      	beq.n	8001746 <TIM_Base_SetConfig+0xb2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <TIM_Base_SetConfig+0x13c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d108      	bne.n	8001758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <TIM_Base_SetConfig+0x114>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d003      	beq.n	800178c <TIM_Base_SetConfig+0xf8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <TIM_Base_SetConfig+0x124>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d103      	bne.n	8001794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	615a      	str	r2, [r3, #20]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40000800 	.word	0x40000800
 80017b4:	40000c00 	.word	0x40000c00
 80017b8:	40010400 	.word	0x40010400
 80017bc:	40014000 	.word	0x40014000
 80017c0:	40014400 	.word	0x40014400
 80017c4:	40014800 	.word	0x40014800
 80017c8:	40001800 	.word	0x40001800
 80017cc:	40001c00 	.word	0x40001c00
 80017d0:	40002000 	.word	0x40002000

080017d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001802:	f7fe fe65 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001806:	f000 f843 	bl	8001890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180a:	f000 f8ab 	bl	8001964 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2302      	movs	r3, #2
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <main+0x7c>)
 800181a:	22c8      	movs	r2, #200	; 0xc8
 800181c:	4917      	ldr	r1, [pc, #92]	; (800187c <main+0x80>)
 800181e:	4818      	ldr	r0, [pc, #96]	; (8001880 <main+0x84>)
 8001820:	f001 f95c 	bl	8002adc <xTaskCreate>
 8001824:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d009      	beq.n	8001840 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001830:	f383 8811 	msr	BASEPRI, r3
 8001834:	f3bf 8f6f 	isb	sy
 8001838:	f3bf 8f4f 	dsb	sy
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	e7fe      	b.n	800183e <main+0x42>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <main+0x88>)
 800184a:	22c8      	movs	r2, #200	; 0xc8
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <main+0x8c>)
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <main+0x90>)
 8001850:	f001 f944 	bl	8002adc <xTaskCreate>
 8001854:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d009      	beq.n	8001870 <main+0x74>
 800185c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001860:	f383 8811 	msr	BASEPRI, r3
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e7fe      	b.n	800186e <main+0x72>

  // Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8001870:	f001 fa78 	bl	8002d64 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001874:	e7fe      	b.n	8001874 <main+0x78>
 8001876:	bf00      	nop
 8001878:	08004f58 	.word	0x08004f58
 800187c:	08004f70 	.word	0x08004f70
 8001880:	08001c21 	.word	0x08001c21
 8001884:	08004f78 	.word	0x08004f78
 8001888:	08004f90 	.word	0x08004f90
 800188c:	08001c31 	.word	0x08001c31

08001890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b094      	sub	sp, #80	; 0x50
 8001894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	2230      	movs	r2, #48	; 0x30
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fedd 	bl	800465e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <SystemClock_Config+0xcc>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <SystemClock_Config+0xcc>)
 80018be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <SystemClock_Config+0xcc>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <SystemClock_Config+0xd0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a21      	ldr	r2, [pc, #132]	; (8001960 <SystemClock_Config+0xd0>)
 80018da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <SystemClock_Config+0xd0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ec:	2302      	movs	r3, #2
 80018ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f4:	2310      	movs	r3, #16
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f8:	2302      	movs	r3, #2
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001900:	2308      	movs	r3, #8
 8001902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001904:	2332      	movs	r3, #50	; 0x32
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001908:	2304      	movs	r3, #4
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800190c:	2307      	movs	r3, #7
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f8b3 	bl	8000a80 <HAL_RCC_OscConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001920:	f000 f9a8 	bl	8001c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001924:	230f      	movs	r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001930:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001936:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800193a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fb0c 	bl	8000f60 <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800194e:	f000 f991 	bl	8001c74 <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3750      	adds	r7, #80	; 0x50
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4aa0      	ldr	r2, [pc, #640]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b9e      	ldr	r3, [pc, #632]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b9a      	ldr	r3, [pc, #616]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a99      	ldr	r2, [pc, #612]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b97      	ldr	r3, [pc, #604]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a92      	ldr	r2, [pc, #584]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a8b      	ldr	r2, [pc, #556]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b85      	ldr	r3, [pc, #532]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a84      	ldr	r2, [pc, #528]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b7e      	ldr	r3, [pc, #504]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a7d      	ldr	r2, [pc, #500]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <MX_GPIO_Init+0x2a0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2108      	movs	r1, #8
 8001a26:	4878      	ldr	r0, [pc, #480]	; (8001c08 <MX_GPIO_Init+0x2a4>)
 8001a28:	f7ff f810 	bl	8000a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4876      	ldr	r0, [pc, #472]	; (8001c0c <MX_GPIO_Init+0x2a8>)
 8001a32:	f7ff f80b 	bl	8000a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001a36:	2200      	movs	r2, #0
 8001a38:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001a3c:	4874      	ldr	r0, [pc, #464]	; (8001c10 <MX_GPIO_Init+0x2ac>)
 8001a3e:	f7ff f805 	bl	8000a4c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a42:	2308      	movs	r3, #8
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	486b      	ldr	r0, [pc, #428]	; (8001c08 <MX_GPIO_Init+0x2a4>)
 8001a5a:	f7fe fe5d 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	4865      	ldr	r0, [pc, #404]	; (8001c0c <MX_GPIO_Init+0x2a8>)
 8001a76:	f7fe fe4f 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	485d      	ldr	r0, [pc, #372]	; (8001c0c <MX_GPIO_Init+0x2a8>)
 8001a96:	f7fe fe3f 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <MX_GPIO_Init+0x2b0>)
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	485a      	ldr	r0, [pc, #360]	; (8001c18 <MX_GPIO_Init+0x2b4>)
 8001aae:	f7fe fe33 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4852      	ldr	r0, [pc, #328]	; (8001c18 <MX_GPIO_Init+0x2b4>)
 8001ace:	f7fe fe23 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ad2:	23e0      	movs	r3, #224	; 0xe0
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	484a      	ldr	r0, [pc, #296]	; (8001c18 <MX_GPIO_Init+0x2b4>)
 8001aee:	f7fe fe13 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001af2:	2304      	movs	r3, #4
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	4845      	ldr	r0, [pc, #276]	; (8001c1c <MX_GPIO_Init+0x2b8>)
 8001b06:	f7fe fe07 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	483d      	ldr	r0, [pc, #244]	; (8001c1c <MX_GPIO_Init+0x2b8>)
 8001b28:	f7fe fdf6 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001b2c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001b30:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4832      	ldr	r0, [pc, #200]	; (8001c10 <MX_GPIO_Init+0x2ac>)
 8001b46:	f7fe fde7 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b4a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4619      	mov	r1, r3
 8001b66:	4829      	ldr	r0, [pc, #164]	; (8001c0c <MX_GPIO_Init+0x2a8>)
 8001b68:	f7fe fdd6 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4825      	ldr	r0, [pc, #148]	; (8001c18 <MX_GPIO_Init+0x2b4>)
 8001b82:	f7fe fdc9 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001b86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b98:	230a      	movs	r3, #10
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481d      	ldr	r0, [pc, #116]	; (8001c18 <MX_GPIO_Init+0x2b4>)
 8001ba4:	f7fe fdb8 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4815      	ldr	r0, [pc, #84]	; (8001c10 <MX_GPIO_Init+0x2ac>)
 8001bbc:	f7fe fdac 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001bc0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480f      	ldr	r0, [pc, #60]	; (8001c1c <MX_GPIO_Init+0x2b8>)
 8001bde:	f7fe fd9b 	bl	8000718 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_GPIO_Init+0x2b0>)
 8001be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_GPIO_Init+0x2a4>)
 8001bf6:	f7fe fd8f 	bl	8000718 <HAL_GPIO_Init>

}
 8001bfa:	bf00      	nop
 8001bfc:	3730      	adds	r7, #48	; 0x30
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	10120000 	.word	0x10120000
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400

08001c20 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f002 fd7d 	bl	8004728 <puts>
 8001c2e:	e7fb      	b.n	8001c28 <task1_handler+0x8>

08001c30 <task2_handler>:
	}
}


static void task2_handler(void* parameters)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f002 fd75 	bl	8004728 <puts>
 8001c3e:	e7fb      	b.n	8001c38 <task2_handler+0x8>

08001c40 <vApplicationIdleHook>:
	}
}


void vApplicationIdleHook(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c62:	f7fe fc57 	bl	8000514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40001000 	.word	0x40001000

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	2036      	movs	r0, #54	; 0x36
 8001cea:	f7fe fceb 	bl	80006c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001cee:	2036      	movs	r0, #54	; 0x36
 8001cf0:	f7fe fd04 	bl	80006fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HAL_InitTick+0xa4>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_InitTick+0xa4>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	6413      	str	r3, [r2, #64]	; 0x40
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_InitTick+0xa4>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fafe 	bl	800131c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d20:	f7ff fae8 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 8001d24:	4603      	mov	r3, r0
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_InitTick+0xa8>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	3b01      	subs	r3, #1
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_InitTick+0xac>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_InitTick+0xb0>)
 8001d3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_InitTick+0xac>)
 8001d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_InitTick+0xac>)
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_InitTick+0xac>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_InitTick+0xac>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d58:	4809      	ldr	r0, [pc, #36]	; (8001d80 <HAL_InitTick+0xac>)
 8001d5a:	f7ff fb11 	bl	8001380 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d104      	bne.n	8001d6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d64:	4806      	ldr	r0, [pc, #24]	; (8001d80 <HAL_InitTick+0xac>)
 8001d66:	f7ff fb40 	bl	80013ea <HAL_TIM_Base_Start_IT>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3730      	adds	r7, #48	; 0x30
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	431bde83 	.word	0x431bde83
 8001d80:	20012e0c 	.word	0x20012e0c
 8001d84:	40001000 	.word	0x40001000

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM6_DAC_IRQHandler+0x10>)
 8001dc2:	f7ff fb36 	bl	8001432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20012e0c 	.word	0x20012e0c

08001dd0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <ITM_SendChar+0x48>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <ITM_SendChar+0x48>)
 8001de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <ITM_SendChar+0x4c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <ITM_SendChar+0x4c>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001df2:	bf00      	nop
 8001df4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f8      	beq.n	8001df4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001e02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	6013      	str	r3, [r2, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000edfc 	.word	0xe000edfc
 8001e1c:	e0000e00 	.word	0xe0000e00

08001e20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e00a      	b.n	8001e48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e32:	f3af 8000 	nop.w
 8001e36:	4601      	mov	r1, r0
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	60ba      	str	r2, [r7, #8]
 8001e3e:	b2ca      	uxtb	r2, r1
 8001e40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf0      	blt.n	8001e32 <_read+0x12>
	}

return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e009      	b.n	8001e80 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	60ba      	str	r2, [r7, #8]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ffab 	bl	8001dd0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf1      	blt.n	8001e6c <_write+0x12>
	}
	return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_close>:

int _close(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	return -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eba:	605a      	str	r2, [r3, #4]
	return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_isatty>:

int _isatty(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
	return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <_sbrk+0x50>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x16>
		heap_end = &end;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <_sbrk+0x50>)
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <_sbrk+0x54>)
 8001f10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <_sbrk+0x50>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <_sbrk+0x50>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	466a      	mov	r2, sp
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d907      	bls.n	8001f36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f26:	f002 fb65 	bl	80045f4 <__errno>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	e006      	b.n	8001f44 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <_sbrk+0x50>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <_sbrk+0x50>)
 8001f40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000094 	.word	0x20000094
 8001f50:	20012e90 	.word	0x20012e90

08001f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <SystemInit+0x28>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <SystemInit+0x28>)
 8001f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SystemInit+0x28>)
 8001f6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f86:	e003      	b.n	8001f90 <LoopCopyDataInit>

08001f88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f8e:	3104      	adds	r1, #4

08001f90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f98:	d3f6      	bcc.n	8001f88 <CopyDataInit>
  ldr  r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f9c:	e002      	b.n	8001fa4 <LoopFillZerobss>

08001f9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fa0:	f842 3b04 	str.w	r3, [r2], #4

08001fa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fa8:	d3f9      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001faa:	f7ff ffd3 	bl	8001f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f002 fb27 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7ff fc23 	bl	80017fc <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fbc:	0800503c 	.word	0x0800503c
  ldr  r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fc4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001fc8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001fcc:	20012e90 	.word	0x20012e90

08001fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC_IRQHandler>

08001fd2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f103 0208 	add.w	r2, r3, #8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fea:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f103 0208 	add.w	r2, r3, #8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f103 0208 	add.w	r2, r3, #8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208a:	d103      	bne.n	8002094 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e00c      	b.n	80020ae <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3308      	adds	r3, #8
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e002      	b.n	80020a2 <vListInsert+0x2e>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d2f6      	bcs.n	800209c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6892      	ldr	r2, [r2, #8]
 80020fc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6852      	ldr	r2, [r2, #4]
 8002106:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	d103      	bne.n	800211a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <xQueueGenericReset+0x28>
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	e7fe      	b.n	8002162 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002164:	f001 ff34 	bl	8003fd0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	441a      	add	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	3b01      	subs	r3, #1
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	441a      	add	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d114      	bne.n	80021e4 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01a      	beq.n	80021f8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3310      	adds	r3, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 f836 	bl	8003238 <xTaskRemoveFromEventList>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <xQueueGenericReset+0xcc>)
 80021d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	e009      	b.n	80021f8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3310      	adds	r3, #16
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fef2 	bl	8001fd2 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3324      	adds	r3, #36	; 0x24
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff feed 	bl	8001fd2 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80021f8:	f001 ff18 	bl	800402c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <xQueueGenericCreate+0x28>
 8002220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e7fe      	b.n	8002232 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <xQueueGenericCreate+0x46>
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	429a      	cmp	r2, r3
 8002250:	d101      	bne.n	8002256 <xQueueGenericCreate+0x4a>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <xQueueGenericCreate+0x4c>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <xQueueGenericCreate+0x64>
 800225c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e7fe      	b.n	800226e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002276:	d909      	bls.n	800228c <xQueueGenericCreate+0x80>
 8002278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227c:	f383 8811 	msr	BASEPRI, r3
 8002280:	f3bf 8f6f 	isb	sy
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	e7fe      	b.n	800228a <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	3350      	adds	r3, #80	; 0x50
 8002290:	4618      	mov	r0, r3
 8002292:	f001 ffb7 	bl	8004204 <pvPortMalloc>
 8002296:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3350      	adds	r3, #80	; 0x50
 80022a6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022a8:	79fa      	ldrb	r2, [r7, #7]
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f805 	bl	80022c4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
    }
 80022bc:	4618      	mov	r0, r3
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e002      	b.n	80022e6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022f2:	2101      	movs	r1, #1
 80022f4:	69b8      	ldr	r0, [r7, #24]
 80022f6:	f7ff ff21 	bl	800213c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08e      	sub	sp, #56	; 0x38
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <xQueueGenericSend+0x30>
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
 800233a:	e7fe      	b.n	800233a <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <xQueueGenericSend+0x3e>
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <xQueueGenericSend+0x42>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <xQueueGenericSend+0x44>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <xQueueGenericSend+0x5c>
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e7fe      	b.n	8002366 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d103      	bne.n	8002376 <xQueueGenericSend+0x6a>
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <xQueueGenericSend+0x6e>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <xQueueGenericSend+0x70>
 800237a:	2300      	movs	r3, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <xQueueGenericSend+0x88>
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	e7fe      	b.n	8002392 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002394:	f001 f8ea 	bl	800356c <xTaskGetSchedulerState>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <xQueueGenericSend+0x98>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <xQueueGenericSend+0x9c>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <xQueueGenericSend+0x9e>
 80023a8:	2300      	movs	r3, #0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <xQueueGenericSend+0xb6>
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	e7fe      	b.n	80023c0 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023c2:	f001 fe05 	bl	8003fd0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <xQueueGenericSend+0xcc>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d129      	bne.n	800242c <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023de:	f000 fa11 	bl	8002804 <prvCopyDataToQueue>
 80023e2:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	3324      	adds	r3, #36	; 0x24
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 ff21 	bl	8003238 <xTaskRemoveFromEventList>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80023fc:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <xQueueGenericSend+0x1f0>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	e00a      	b.n	8002424 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <xQueueGenericSend+0x1f0>)
 8002416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002424:	f001 fe02 	bl	800402c <vPortExitCritical>
                return pdPASS;
 8002428:	2301      	movs	r3, #1
 800242a:	e063      	b.n	80024f4 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002432:	f001 fdfb 	bl	800402c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002436:	2300      	movs	r3, #0
 8002438:	e05c      	b.n	80024f4 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4618      	mov	r0, r3
 8002446:	f000 ff59 	bl	80032fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800244a:	2301      	movs	r3, #1
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800244e:	f001 fded 	bl	800402c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002452:	f000 fcd7 	bl	8002e04 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002456:	f001 fdbb 	bl	8003fd0 <vPortEnterCritical>
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002460:	b25b      	sxtb	r3, r3
 8002462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002466:	d103      	bne.n	8002470 <xQueueGenericSend+0x164>
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002476:	b25b      	sxtb	r3, r3
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d103      	bne.n	8002486 <xQueueGenericSend+0x17a>
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002486:	f001 fdd1 	bl	800402c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800248a:	1d3a      	adds	r2, r7, #4
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f000 ff48 	bl	8003328 <xTaskCheckForTimeOut>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d124      	bne.n	80024e8 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800249e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024a0:	f000 faa8 	bl	80029f4 <prvIsQueueFull>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d018      	beq.n	80024dc <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	3310      	adds	r3, #16
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fe72 	bl	800319c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80024b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ba:	f000 fa33 	bl	8002924 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80024be:	f000 fcaf 	bl	8002e20 <xTaskResumeAll>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f af7c 	bne.w	80023c2 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <xQueueGenericSend+0x1f0>)
 80024cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	e772      	b.n	80023c2 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80024dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024de:	f000 fa21 	bl	8002924 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024e2:	f000 fc9d 	bl	8002e20 <xTaskResumeAll>
 80024e6:	e76c      	b.n	80023c2 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80024e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ea:	f000 fa1b 	bl	8002924 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80024ee:	f000 fc97 	bl	8002e20 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80024f2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3738      	adds	r7, #56	; 0x38
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	e000ed04 	.word	0xe000ed04

08002500 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b090      	sub	sp, #64	; 0x40
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <xQueueGenericSendFromISR+0x2c>
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
 800252a:	e7fe      	b.n	800252a <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <xQueueGenericSendFromISR+0x3a>
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <xQueueGenericSendFromISR+0x3e>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <xQueueGenericSendFromISR+0x40>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <xQueueGenericSendFromISR+0x58>
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	e7fe      	b.n	8002556 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d103      	bne.n	8002566 <xQueueGenericSendFromISR+0x66>
 800255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <xQueueGenericSendFromISR+0x6a>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <xQueueGenericSendFromISR+0x6c>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <xQueueGenericSendFromISR+0x84>
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	e7fe      	b.n	8002582 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002584:	f001 fe00 	bl	8004188 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002588:	f3ef 8211 	mrs	r2, BASEPRI
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	61fa      	str	r2, [r7, #28]
 800259e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80025a0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d302      	bcc.n	80025b6 <xQueueGenericSendFromISR+0xb6>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d13d      	bne.n	8002632 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025cc:	f000 f91a 	bl	8002804 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80025d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d112      	bne.n	8002600 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d024      	beq.n	800262c <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	3324      	adds	r3, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fe26 	bl	8003238 <xTaskRemoveFromEventList>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01c      	beq.n	800262c <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d019      	beq.n	800262c <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e015      	b.n	800262c <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002600:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002604:	2b7f      	cmp	r3, #127	; 0x7f
 8002606:	d109      	bne.n	800261c <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e7fe      	b.n	800261a <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800261c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002620:	3301      	adds	r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	b25a      	sxtb	r2, r3
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800262c:	2301      	movs	r3, #1
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002630:	e001      	b.n	8002636 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002632:	2300      	movs	r3, #0
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002642:	4618      	mov	r0, r3
 8002644:	3740      	adds	r7, #64	; 0x40
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <xQueueReceive+0x2e>
        __asm volatile
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	e7fe      	b.n	8002678 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <xQueueReceive+0x3c>
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <xQueueReceive+0x40>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <xQueueReceive+0x42>
 800268c:	2300      	movs	r3, #0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <xQueueReceive+0x5a>
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e7fe      	b.n	80026a4 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026a6:	f000 ff61 	bl	800356c <xTaskGetSchedulerState>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <xQueueReceive+0x6a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <xQueueReceive+0x6e>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <xQueueReceive+0x70>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <xQueueReceive+0x88>
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e7fe      	b.n	80026d2 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026d4:	f001 fc7c 	bl	8003fd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01f      	beq.n	8002724 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e8:	f000 f8f6 	bl	80028d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00f      	beq.n	800271c <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	3310      	adds	r3, #16
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd99 	bl	8003238 <xTaskRemoveFromEventList>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800270c:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <xQueueReceive+0x1b4>)
 800270e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800271c:	f001 fc86 	bl	800402c <vPortExitCritical>
                return pdPASS;
 8002720:	2301      	movs	r3, #1
 8002722:	e069      	b.n	80027f8 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800272a:	f001 fc7f 	bl	800402c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800272e:	2300      	movs	r3, #0
 8002730:	e062      	b.n	80027f8 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fddd 	bl	80032fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002742:	2301      	movs	r3, #1
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002746:	f001 fc71 	bl	800402c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800274a:	f000 fb5b 	bl	8002e04 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800274e:	f001 fc3f 	bl	8003fd0 <vPortEnterCritical>
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002758:	b25b      	sxtb	r3, r3
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275e:	d103      	bne.n	8002768 <xQueueReceive+0x11c>
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276e:	b25b      	sxtb	r3, r3
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d103      	bne.n	800277e <xQueueReceive+0x132>
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800277e:	f001 fc55 	bl	800402c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002782:	1d3a      	adds	r2, r7, #4
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fdcc 	bl	8003328 <xTaskCheckForTimeOut>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d123      	bne.n	80027de <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002798:	f000 f916 	bl	80029c8 <prvIsQueueEmpty>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d017      	beq.n	80027d2 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	3324      	adds	r3, #36	; 0x24
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fcf6 	bl	800319c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027b2:	f000 f8b7 	bl	8002924 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80027b6:	f000 fb33 	bl	8002e20 <xTaskResumeAll>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d189      	bne.n	80026d4 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <xQueueReceive+0x1b4>)
 80027c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	e780      	b.n	80026d4 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80027d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027d4:	f000 f8a6 	bl	8002924 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027d8:	f000 fb22 	bl	8002e20 <xTaskResumeAll>
 80027dc:	e77a      	b.n	80026d4 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e0:	f000 f8a0 	bl	8002924 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027e4:	f000 fb1c 	bl	8002e20 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ea:	f000 f8ed 	bl	80029c8 <prvIsQueueEmpty>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f43f af6f 	beq.w	80026d4 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80027f6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3730      	adds	r7, #48	; 0x30
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d14d      	bne.n	80028c6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 feba 	bl	80035a8 <xTaskPriorityDisinherit>
 8002834:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e043      	b.n	80028c6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d119      	bne.n	8002878 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6858      	ldr	r0, [r3, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	461a      	mov	r2, r3
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	f001 fefa 	bl	8004648 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d32b      	bcc.n	80028c6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e026      	b.n	80028c6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68d8      	ldr	r0, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	461a      	mov	r2, r3
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	f001 fee0 	bl	8004648 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	425b      	negs	r3, r3
 8002892:	441a      	add	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	425b      	negs	r3, r3
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d105      	bne.n	80028c6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80028ce:	697b      	ldr	r3, [r7, #20]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d018      	beq.n	800291c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	441a      	add	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	d303      	bcc.n	800290c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68d9      	ldr	r1, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	461a      	mov	r2, r3
 8002916:	6838      	ldr	r0, [r7, #0]
 8002918:	f001 fe96 	bl	8004648 <memcpy>
    }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800292c:	f001 fb50 	bl	8003fd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002936:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002938:	e011      	b.n	800295e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d012      	beq.n	8002968 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3324      	adds	r3, #36	; 0x24
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fc76 	bl	8003238 <xTaskRemoveFromEventList>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002952:	f000 fd4d 	bl	80033f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3b01      	subs	r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	dce9      	bgt.n	800293a <prvUnlockQueue+0x16>
 8002966:	e000      	b.n	800296a <prvUnlockQueue+0x46>
                        break;
 8002968:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	22ff      	movs	r2, #255	; 0xff
 800296e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002972:	f001 fb5b 	bl	800402c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002976:	f001 fb2b 	bl	8003fd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002980:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002982:	e011      	b.n	80029a8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d012      	beq.n	80029b2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3310      	adds	r3, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fc51 	bl	8003238 <xTaskRemoveFromEventList>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800299c:	f000 fd28 	bl	80033f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	dce9      	bgt.n	8002984 <prvUnlockQueue+0x60>
 80029b0:	e000      	b.n	80029b4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80029b2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80029bc:	f001 fb36 	bl	800402c <vPortExitCritical>
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029d0:	f001 fafe 	bl	8003fd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80029dc:	2301      	movs	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e001      	b.n	80029e6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029e6:	f001 fb21 	bl	800402c <vPortExitCritical>

    return xReturn;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029fc:	f001 fae8 	bl	8003fd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d102      	bne.n	8002a12 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e001      	b.n	8002a16 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a16:	f001 fb09 	bl	800402c <vPortExitCritical>

    return xReturn;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e014      	b.n	8002a5e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002a34:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <vQueueAddToRegistry+0x4c>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002a40:	490b      	ldr	r1, [pc, #44]	; (8002a70 <vQueueAddToRegistry+0x4c>)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <vQueueAddToRegistry+0x4c>)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002a56:	e005      	b.n	8002a64 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b07      	cmp	r3, #7
 8002a62:	d9e7      	bls.n	8002a34 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	20012e4c 	.word	0x20012e4c

08002a74 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a84:	f001 faa4 	bl	8003fd0 <vPortEnterCritical>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d103      	bne.n	8002a9e <vQueueWaitForMessageRestricted+0x2a>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d103      	bne.n	8002ab4 <vQueueWaitForMessageRestricted+0x40>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab4:	f001 faba 	bl	800402c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d106      	bne.n	8002ace <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3324      	adds	r3, #36	; 0x24
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fb8b 	bl	80031e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff ff28 	bl	8002924 <prvUnlockQueue>
    }
 8002ad4:	bf00      	nop
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af04      	add	r7, sp, #16
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 fb87 	bl	8004204 <pvPortMalloc>
 8002af6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002afe:	2058      	movs	r0, #88	; 0x58
 8002b00:	f001 fb80 	bl	8004204 <pvPortMalloc>
 8002b04:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
 8002b12:	e005      	b.n	8002b20 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	f001 fc51 	bl	80043bc <vPortFree>
 8002b1a:	e001      	b.n	8002b20 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d013      	beq.n	8002b4e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9303      	str	r3, [sp, #12]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	9302      	str	r3, [sp, #8]
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f80e 	bl	8002b5e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b42:	69f8      	ldr	r0, [r7, #28]
 8002b44:	f000 f8a0 	bl	8002c88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e002      	b.n	8002b54 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b54:	69bb      	ldr	r3, [r7, #24]
    }
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b088      	sub	sp, #32
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	461a      	mov	r2, r3
 8002b76:	21a5      	movs	r1, #165	; 0xa5
 8002b78:	f001 fd71 	bl	800465e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b86:	3b01      	subs	r3, #1
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f023 0307 	bic.w	r3, r3, #7
 8002b94:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <prvInitialiseNewTask+0x56>
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	e7fe      	b.n	8002bb2 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01f      	beq.n	8002bfa <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e012      	b.n	8002be6 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	7819      	ldrb	r1, [r3, #0]
 8002bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3334      	adds	r3, #52	; 0x34
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d9e9      	bls.n	8002bc0 <prvInitialiseNewTask+0x62>
 8002bec:	e000      	b.n	8002bf0 <prvInitialiseNewTask+0x92>
            {
                break;
 8002bee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bf8:	e003      	b.n	8002c02 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d901      	bls.n	8002c0c <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c16:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	3304      	adds	r3, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f9f5 	bl	8002012 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f9f0 	bl	8002012 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c36:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	f1c3 0205 	rsb	r2, r3, #5
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	3350      	adds	r3, #80	; 0x50
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 fd04 	bl	800465e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	3354      	adds	r3, #84	; 0x54
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fcfd 	bl	800465e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	69b8      	ldr	r0, [r7, #24]
 8002c6a:	f001 f889 	bl	8003d80 <pxPortInitialiseStack>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c80:	bf00      	nop
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c90:	f001 f99e 	bl	8003fd0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <prvAddNewTaskToReadyList+0xc0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <prvAddNewTaskToReadyList+0xc0>)
 8002c9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <prvAddNewTaskToReadyList+0xc4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ca6:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <prvAddNewTaskToReadyList+0xc4>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <prvAddNewTaskToReadyList+0xc0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d110      	bne.n	8002cd6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002cb4:	f000 fbc2 	bl	800343c <prvInitialiseTaskLists>
 8002cb8:	e00d      	b.n	8002cd6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <prvAddNewTaskToReadyList+0xc8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cc2:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <prvAddNewTaskToReadyList+0xc4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d802      	bhi.n	8002cd6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <prvAddNewTaskToReadyList+0xc4>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <prvAddNewTaskToReadyList+0xcc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <prvAddNewTaskToReadyList+0xcc>)
 8002cde:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ce0:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <prvAddNewTaskToReadyList+0xcc>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2201      	movs	r2, #1
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <prvAddNewTaskToReadyList+0xd0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <prvAddNewTaskToReadyList+0xd0>)
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <prvAddNewTaskToReadyList+0xd4>)
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f7ff f98b 	bl	800202c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d16:	f001 f989 	bl	800402c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <prvAddNewTaskToReadyList+0xc8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00e      	beq.n	8002d40 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <prvAddNewTaskToReadyList+0xc4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d207      	bcs.n	8002d40 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <prvAddNewTaskToReadyList+0xd8>)
 8002d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000170 	.word	0x20000170
 8002d4c:	20000098 	.word	0x20000098
 8002d50:	2000017c 	.word	0x2000017c
 8002d54:	2000018c 	.word	0x2000018c
 8002d58:	20000178 	.word	0x20000178
 8002d5c:	2000009c 	.word	0x2000009c
 8002d60:	e000ed04 	.word	0xe000ed04

08002d64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <vTaskStartScheduler+0x84>)
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2300      	movs	r3, #0
 8002d74:	2282      	movs	r2, #130	; 0x82
 8002d76:	491d      	ldr	r1, [pc, #116]	; (8002dec <vTaskStartScheduler+0x88>)
 8002d78:	481d      	ldr	r0, [pc, #116]	; (8002df0 <vTaskStartScheduler+0x8c>)
 8002d7a:	f7ff feaf 	bl	8002adc <xTaskCreate>
 8002d7e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002d86:	f000 fced 	bl	8003764 <xTimerCreateTimerTask>
 8002d8a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d115      	bne.n	8002dbe <vTaskStartScheduler+0x5a>
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <vTaskStartScheduler+0x90>)
 8002da6:	f04f 32ff 	mov.w	r2, #4294967295
 8002daa:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dac:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <vTaskStartScheduler+0x94>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <vTaskStartScheduler+0x98>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002db8:	f001 f86c 	bl	8003e94 <xPortStartScheduler>
 8002dbc:	e00d      	b.n	8002dda <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d109      	bne.n	8002dda <vTaskStartScheduler+0x76>
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	e7fe      	b.n	8002dd8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <vTaskStartScheduler+0x9c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000194 	.word	0x20000194
 8002dec:	08004f98 	.word	0x08004f98
 8002df0:	08003409 	.word	0x08003409
 8002df4:	20000190 	.word	0x20000190
 8002df8:	2000017c 	.word	0x2000017c
 8002dfc:	20000174 	.word	0x20000174
 8002e00:	2000000c 	.word	0x2000000c

08002e04 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <vTaskSuspendAll+0x18>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <vTaskSuspendAll+0x18>)
 8002e10:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	20000198 	.word	0x20000198

08002e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e2e:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <xTaskResumeAll+0x114>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <xTaskResumeAll+0x2a>
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	e7fe      	b.n	8002e48 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e4a:	f001 f8c1 	bl	8003fd0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <xTaskResumeAll+0x114>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	4a37      	ldr	r2, [pc, #220]	; (8002f34 <xTaskResumeAll+0x114>)
 8002e56:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <xTaskResumeAll+0x114>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d161      	bne.n	8002f24 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e60:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <xTaskResumeAll+0x118>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d05d      	beq.n	8002f24 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e68:	e02e      	b.n	8002ec8 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <xTaskResumeAll+0x11c>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3318      	adds	r3, #24
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f935 	bl	80020e6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff f930 	bl	80020e6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <xTaskResumeAll+0x120>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	4a2a      	ldr	r2, [pc, #168]	; (8002f40 <xTaskResumeAll+0x120>)
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <xTaskResumeAll+0x124>)
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f7ff f8bc 	bl	800202c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <xTaskResumeAll+0x128>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <xTaskResumeAll+0x12c>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <xTaskResumeAll+0x11c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1cc      	bne.n	8002e6a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ed6:	f000 fb2d 	bl	8003534 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <xTaskResumeAll+0x130>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ee6:	f000 f847 	bl	8002f78 <xTaskIncrementTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <xTaskResumeAll+0x12c>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f1      	bne.n	8002ee6 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <xTaskResumeAll+0x130>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <xTaskResumeAll+0x12c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <xTaskResumeAll+0x134>)
 8002f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f24:	f001 f882 	bl	800402c <vPortExitCritical>

    return xAlreadyYielded;
 8002f28:	68bb      	ldr	r3, [r7, #8]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000198 	.word	0x20000198
 8002f38:	20000170 	.word	0x20000170
 8002f3c:	20000130 	.word	0x20000130
 8002f40:	20000178 	.word	0x20000178
 8002f44:	2000009c 	.word	0x2000009c
 8002f48:	20000098 	.word	0x20000098
 8002f4c:	20000184 	.word	0x20000184
 8002f50:	20000180 	.word	0x20000180
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <xTaskGetTickCount+0x1c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f64:	687b      	ldr	r3, [r7, #4]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000174 	.word	0x20000174

08002f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f82:	4b4e      	ldr	r3, [pc, #312]	; (80030bc <xTaskIncrementTick+0x144>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 808d 	bne.w	80030a6 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <xTaskIncrementTick+0x148>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f94:	4a4a      	ldr	r2, [pc, #296]	; (80030c0 <xTaskIncrementTick+0x148>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11f      	bne.n	8002fe0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002fa0:	4b48      	ldr	r3, [pc, #288]	; (80030c4 <xTaskIncrementTick+0x14c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <xTaskIncrementTick+0x46>
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	e7fe      	b.n	8002fbc <xTaskIncrementTick+0x44>
 8002fbe:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <xTaskIncrementTick+0x14c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <xTaskIncrementTick+0x150>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a3e      	ldr	r2, [pc, #248]	; (80030c4 <xTaskIncrementTick+0x14c>)
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4a3e      	ldr	r2, [pc, #248]	; (80030c8 <xTaskIncrementTick+0x150>)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <xTaskIncrementTick+0x154>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a3c      	ldr	r2, [pc, #240]	; (80030cc <xTaskIncrementTick+0x154>)
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	f000 faaa 	bl	8003534 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <xTaskIncrementTick+0x158>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d348      	bcc.n	800307c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <xTaskIncrementTick+0x14c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <xTaskIncrementTick+0x158>)
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffa:	601a      	str	r2, [r3, #0]
                    break;
 8002ffc:	e03e      	b.n	800307c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <xTaskIncrementTick+0x14c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d203      	bcs.n	800301e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003016:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <xTaskIncrementTick+0x158>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800301c:	e02e      	b.n	800307c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3304      	adds	r3, #4
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f85f 	bl	80020e6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3318      	adds	r3, #24
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f856 	bl	80020e6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	2201      	movs	r2, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <xTaskIncrementTick+0x15c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <xTaskIncrementTick+0x15c>)
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <xTaskIncrementTick+0x160>)
 800305a:	441a      	add	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f7fe ffe2 	bl	800202c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <xTaskIncrementTick+0x164>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	429a      	cmp	r2, r3
 8003074:	d3b9      	bcc.n	8002fea <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800307a:	e7b6      	b.n	8002fea <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <xTaskIncrementTick+0x164>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4915      	ldr	r1, [pc, #84]	; (80030d8 <xTaskIncrementTick+0x160>)
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d901      	bls.n	8003098 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <xTaskIncrementTick+0x168>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e004      	b.n	80030b0 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <xTaskIncrementTick+0x16c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <xTaskIncrementTick+0x16c>)
 80030ae:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80030b0:	697b      	ldr	r3, [r7, #20]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000198 	.word	0x20000198
 80030c0:	20000174 	.word	0x20000174
 80030c4:	20000128 	.word	0x20000128
 80030c8:	2000012c 	.word	0x2000012c
 80030cc:	20000188 	.word	0x20000188
 80030d0:	20000190 	.word	0x20000190
 80030d4:	20000178 	.word	0x20000178
 80030d8:	2000009c 	.word	0x2000009c
 80030dc:	20000098 	.word	0x20000098
 80030e0:	20000184 	.word	0x20000184
 80030e4:	20000180 	.word	0x20000180

080030e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <vTaskSwitchContext+0xa0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <vTaskSwitchContext+0xa4>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80030fc:	e03e      	b.n	800317c <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <vTaskSwitchContext+0xa4>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <vTaskSwitchContext+0xa8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f1c3 031f 	rsb	r3, r3, #31
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	491e      	ldr	r1, [pc, #120]	; (8003194 <vTaskSwitchContext+0xac>)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <vTaskSwitchContext+0x5a>
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	e7fe      	b.n	8003140 <vTaskSwitchContext+0x58>
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <vTaskSwitchContext+0xac>)
 800314e:	4413      	add	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3308      	adds	r3, #8
 8003164:	429a      	cmp	r2, r3
 8003166:	d104      	bne.n	8003172 <vTaskSwitchContext+0x8a>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <vTaskSwitchContext+0xb0>)
 800317a:	6013      	str	r3, [r2, #0]
}
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	20000198 	.word	0x20000198
 800318c:	20000184 	.word	0x20000184
 8003190:	20000178 	.word	0x20000178
 8003194:	2000009c 	.word	0x2000009c
 8003198:	20000098 	.word	0x20000098

0800319c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <vTaskPlaceOnEventList+0x24>
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e7fe      	b.n	80031be <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <vTaskPlaceOnEventList+0x44>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3318      	adds	r3, #24
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fe ff53 	bl	8002074 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031ce:	2101      	movs	r1, #1
 80031d0:	6838      	ldr	r0, [r7, #0]
 80031d2:	f000 fa61 	bl	8003698 <prvAddCurrentTaskToDelayedList>
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000098 	.word	0x20000098

080031e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <vTaskPlaceOnEventListRestricted+0x26>
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e7fe      	b.n	8003208 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <vTaskPlaceOnEventListRestricted+0x50>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3318      	adds	r3, #24
 8003210:	4619      	mov	r1, r3
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7fe ff0a 	bl	800202c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	68b8      	ldr	r0, [r7, #8]
 8003228:	f000 fa36 	bl	8003698 <prvAddCurrentTaskToDelayedList>
    }
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000098 	.word	0x20000098

08003238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <xTaskRemoveFromEventList+0x2a>
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e7fe      	b.n	8003260 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	3318      	adds	r3, #24
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe ff3d 	bl	80020e6 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <xTaskRemoveFromEventList+0xac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11c      	bne.n	80032ae <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3304      	adds	r3, #4
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe ff34 	bl	80020e6 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2201      	movs	r2, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <xTaskRemoveFromEventList+0xb0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <xTaskRemoveFromEventList+0xb0>)
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4a13      	ldr	r2, [pc, #76]	; (80032ec <xTaskRemoveFromEventList+0xb4>)
 800329e:	441a      	add	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f7fe fec0 	bl	800202c <vListInsertEnd>
 80032ac:	e005      	b.n	80032ba <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	3318      	adds	r3, #24
 80032b2:	4619      	mov	r1, r3
 80032b4:	480e      	ldr	r0, [pc, #56]	; (80032f0 <xTaskRemoveFromEventList+0xb8>)
 80032b6:	f7fe feb9 	bl	800202c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <xTaskRemoveFromEventList+0xbc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d905      	bls.n	80032d4 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <xTaskRemoveFromEventList+0xc0>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e001      	b.n	80032d8 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80032d8:	697b      	ldr	r3, [r7, #20]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000198 	.word	0x20000198
 80032e8:	20000178 	.word	0x20000178
 80032ec:	2000009c 	.word	0x2000009c
 80032f0:	20000130 	.word	0x20000130
 80032f4:	20000098 	.word	0x20000098
 80032f8:	20000184 	.word	0x20000184

080032fc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <vTaskInternalSetTimeOutState+0x24>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <vTaskInternalSetTimeOutState+0x28>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	20000188 	.word	0x20000188
 8003324:	20000174 	.word	0x20000174

08003328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <xTaskCheckForTimeOut+0x24>
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e7fe      	b.n	800334a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <xTaskCheckForTimeOut+0x3e>
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e7fe      	b.n	8003364 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8003366:	f000 fe33 	bl	8003fd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <xTaskCheckForTimeOut+0xc0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d102      	bne.n	800338a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e026      	b.n	80033d8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <xTaskCheckForTimeOut+0xc4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d00a      	beq.n	80033ac <xTaskCheckForTimeOut+0x84>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	d305      	bcc.n	80033ac <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e015      	b.n	80033d8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20b      	bcs.n	80033ce <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	1ad2      	subs	r2, r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff9a 	bl	80032fc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	e004      	b.n	80033d8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80033d8:	f000 fe28 	bl	800402c <vPortExitCritical>

    return xReturn;
 80033dc:	69fb      	ldr	r3, [r7, #28]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000174 	.word	0x20000174
 80033ec:	20000188 	.word	0x20000188

080033f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <vTaskMissedYield+0x14>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	20000184 	.word	0x20000184

08003408 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003410:	f000 f854 	bl	80034bc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <prvIdleTask+0x2c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d907      	bls.n	800342c <prvIdleTask+0x24>
                {
                    taskYIELD();
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <prvIdleTask+0x30>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 800342c:	f7fe fc08 	bl	8001c40 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003430:	e7ee      	b.n	8003410 <prvIdleTask+0x8>
 8003432:	bf00      	nop
 8003434:	2000009c 	.word	0x2000009c
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	e00c      	b.n	8003462 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <prvInitialiseTaskLists+0x60>)
 8003454:	4413      	add	r3, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fdbb 	bl	8001fd2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3301      	adds	r3, #1
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d9ef      	bls.n	8003448 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003468:	480d      	ldr	r0, [pc, #52]	; (80034a0 <prvInitialiseTaskLists+0x64>)
 800346a:	f7fe fdb2 	bl	8001fd2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800346e:	480d      	ldr	r0, [pc, #52]	; (80034a4 <prvInitialiseTaskLists+0x68>)
 8003470:	f7fe fdaf 	bl	8001fd2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003474:	480c      	ldr	r0, [pc, #48]	; (80034a8 <prvInitialiseTaskLists+0x6c>)
 8003476:	f7fe fdac 	bl	8001fd2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800347a:	480c      	ldr	r0, [pc, #48]	; (80034ac <prvInitialiseTaskLists+0x70>)
 800347c:	f7fe fda9 	bl	8001fd2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003480:	480b      	ldr	r0, [pc, #44]	; (80034b0 <prvInitialiseTaskLists+0x74>)
 8003482:	f7fe fda6 	bl	8001fd2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <prvInitialiseTaskLists+0x78>)
 8003488:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <prvInitialiseTaskLists+0x64>)
 800348a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvInitialiseTaskLists+0x7c>)
 800348e:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <prvInitialiseTaskLists+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000009c 	.word	0x2000009c
 80034a0:	20000100 	.word	0x20000100
 80034a4:	20000114 	.word	0x20000114
 80034a8:	20000130 	.word	0x20000130
 80034ac:	20000144 	.word	0x20000144
 80034b0:	2000015c 	.word	0x2000015c
 80034b4:	20000128 	.word	0x20000128
 80034b8:	2000012c 	.word	0x2000012c

080034bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034c2:	e019      	b.n	80034f8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80034c4:	f000 fd84 	bl	8003fd0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <prvCheckTasksWaitingTermination+0x4c>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fe06 	bl	80020e6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <prvCheckTasksWaitingTermination+0x50>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3b01      	subs	r3, #1
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <prvCheckTasksWaitingTermination+0x50>)
 80034e2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <prvCheckTasksWaitingTermination+0x54>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <prvCheckTasksWaitingTermination+0x54>)
 80034ec:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80034ee:	f000 fd9d 	bl	800402c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f80e 	bl	8003514 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <prvCheckTasksWaitingTermination+0x54>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e1      	bne.n	80034c4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000144 	.word	0x20000144
 800350c:	20000170 	.word	0x20000170
 8003510:	20000158 	.word	0x20000158

08003514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4618      	mov	r0, r3
 8003522:	f000 ff4b 	bl	80043bc <vPortFree>
                vPortFree( pxTCB );
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 ff48 	bl	80043bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <prvResetNextTaskUnblockTime+0x30>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <prvResetNextTaskUnblockTime+0x34>)
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800354a:	e005      	b.n	8003558 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <prvResetNextTaskUnblockTime+0x30>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <prvResetNextTaskUnblockTime+0x34>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000128 	.word	0x20000128
 8003568:	20000190 	.word	0x20000190

0800356c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <xTaskGetSchedulerState+0x34>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800357a:	2301      	movs	r3, #1
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	e008      	b.n	8003592 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <xTaskGetSchedulerState+0x38>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003588:	2302      	movs	r3, #2
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	e001      	b.n	8003592 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003592:	687b      	ldr	r3, [r7, #4]
    }
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	2000017c 	.word	0x2000017c
 80035a4:	20000198 	.word	0x20000198

080035a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d061      	beq.n	8003682 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80035be:	4b33      	ldr	r3, [pc, #204]	; (800368c <xTaskPriorityDisinherit+0xe4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d009      	beq.n	80035dc <xTaskPriorityDisinherit+0x34>
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	e7fe      	b.n	80035da <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <xTaskPriorityDisinherit+0x50>
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	e7fe      	b.n	80035f6 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	1e5a      	subs	r2, r3, #1
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	429a      	cmp	r2, r3
 800360c:	d039      	beq.n	8003682 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d135      	bne.n	8003682 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3304      	adds	r3, #4
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fd63 	bl	80020e6 <uxListRemove>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	2201      	movs	r2, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43da      	mvns	r2, r3
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <xTaskPriorityDisinherit+0xe8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4013      	ands	r3, r2
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <xTaskPriorityDisinherit+0xe8>)
 800363a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f1c3 0205 	rsb	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	2201      	movs	r2, #1
 8003656:	409a      	lsls	r2, r3
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <xTaskPriorityDisinherit+0xe8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <xTaskPriorityDisinherit+0xe8>)
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <xTaskPriorityDisinherit+0xec>)
 8003670:	441a      	add	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7fe fcd7 	bl	800202c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800367e:	2301      	movs	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003682:	697b      	ldr	r3, [r7, #20]
    }
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000098 	.word	0x20000098
 8003690:	20000178 	.word	0x20000178
 8003694:	2000009c 	.word	0x2000009c

08003698 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <prvAddCurrentTaskToDelayedList+0xb0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036a8:	4b28      	ldr	r3, [pc, #160]	; (800374c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3304      	adds	r3, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fd19 	bl	80020e6 <uxListRemove>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2201      	movs	r2, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4013      	ands	r3, r2
 80036ce:	4a20      	ldr	r2, [pc, #128]	; (8003750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d10a      	bne.n	80036f0 <prvAddCurrentTaskToDelayedList+0x58>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	481a      	ldr	r0, [pc, #104]	; (8003754 <prvAddCurrentTaskToDelayedList+0xbc>)
 80036ea:	f7fe fc9f 	bl	800202c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80036ee:	e026      	b.n	800373e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d209      	bcs.n	800371c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <prvAddCurrentTaskToDelayedList+0xc0>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <prvAddCurrentTaskToDelayedList+0xb4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f7fe fcad 	bl	8002074 <vListInsert>
}
 800371a:	e010      	b.n	800373e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <prvAddCurrentTaskToDelayedList+0xc4>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe fca3 	bl	8002074 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	d202      	bcs.n	800373e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <prvAddCurrentTaskToDelayedList+0xc8>)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	6013      	str	r3, [r2, #0]
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000174 	.word	0x20000174
 800374c:	20000098 	.word	0x20000098
 8003750:	20000178 	.word	0x20000178
 8003754:	2000015c 	.word	0x2000015c
 8003758:	2000012c 	.word	0x2000012c
 800375c:	20000128 	.word	0x20000128
 8003760:	20000190 	.word	0x20000190

08003764 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800376e:	f000 fad1 	bl	8003d14 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <xTimerCreateTimerTask+0x54>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <xTimerCreateTimerTask+0x58>)
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2302      	movs	r3, #2
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003788:	490d      	ldr	r1, [pc, #52]	; (80037c0 <xTimerCreateTimerTask+0x5c>)
 800378a:	480e      	ldr	r0, [pc, #56]	; (80037c4 <xTimerCreateTimerTask+0x60>)
 800378c:	f7ff f9a6 	bl	8002adc <xTaskCreate>
 8003790:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <xTimerCreateTimerTask+0x48>
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	e7fe      	b.n	80037aa <xTimerCreateTimerTask+0x46>
        return xReturn;
 80037ac:	687b      	ldr	r3, [r7, #4]
    }
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200001cc 	.word	0x200001cc
 80037bc:	200001d0 	.word	0x200001d0
 80037c0:	08004fa0 	.word	0x08004fa0
 80037c4:	080038f9 	.word	0x080038f9

080037c8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <xTimerGenericCommand+0x2c>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	623b      	str	r3, [r7, #32]
 80037f2:	e7fe      	b.n	80037f2 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <xTimerGenericCommand+0x94>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02a      	beq.n	8003852 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	dc18      	bgt.n	8003840 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800380e:	f7ff fead 	bl	800356c <xTaskGetSchedulerState>
 8003812:	4603      	mov	r3, r0
 8003814:	2b02      	cmp	r3, #2
 8003816:	d109      	bne.n	800382c <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <xTimerGenericCommand+0x94>)
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	f107 0114 	add.w	r1, r7, #20
 8003820:	2300      	movs	r3, #0
 8003822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003824:	f7fe fd72 	bl	800230c <xQueueGenericSend>
 8003828:	6278      	str	r0, [r7, #36]	; 0x24
 800382a:	e012      	b.n	8003852 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <xTimerGenericCommand+0x94>)
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	f107 0114 	add.w	r1, r7, #20
 8003834:	2300      	movs	r3, #0
 8003836:	2200      	movs	r2, #0
 8003838:	f7fe fd68 	bl	800230c <xQueueGenericSend>
 800383c:	6278      	str	r0, [r7, #36]	; 0x24
 800383e:	e008      	b.n	8003852 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <xTimerGenericCommand+0x94>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	f107 0114 	add.w	r1, r7, #20
 8003848:	2300      	movs	r3, #0
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	f7fe fe58 	bl	8002500 <xQueueGenericSendFromISR>
 8003850:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200001cc 	.word	0x200001cc

08003860 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <prvProcessExpiredTimer+0x94>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fc34 	bl	80020e6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d021      	beq.n	80038d0 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	18d1      	adds	r1, r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f000 f8d1 	bl	8003a40 <prvInsertTimerInActiveList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01e      	beq.n	80038e2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038a4:	2300      	movs	r3, #0
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	2100      	movs	r1, #0
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7ff ff8a 	bl	80037c8 <xTimerGenericCommand>
 80038b4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d112      	bne.n	80038e2 <prvProcessExpiredTimer+0x82>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e7fe      	b.n	80038ce <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	4798      	blx	r3
    }
 80038ea:	bf00      	nop
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200001c4 	.word	0x200001c4

080038f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003900:	f107 0308 	add.w	r3, r7, #8
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f857 	bl	80039b8 <prvGetNextExpireTime>
 800390a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4619      	mov	r1, r3
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f803 	bl	800391c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003916:	f000 f8d5 	bl	8003ac4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800391a:	e7f1      	b.n	8003900 <prvTimerTask+0x8>

0800391c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003926:	f7ff fa6d 	bl	8002e04 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f866 	bl	8003a00 <prvSampleTimeNow>
 8003934:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d130      	bne.n	800399e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <prvProcessTimerOrBlockTask+0x3c>
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	429a      	cmp	r2, r3
 8003948:	d806      	bhi.n	8003958 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800394a:	f7ff fa69 	bl	8002e20 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800394e:	68f9      	ldr	r1, [r7, #12]
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff85 	bl	8003860 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003956:	e024      	b.n	80039a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <prvProcessTimerOrBlockTask+0x90>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <prvProcessTimerOrBlockTask+0x50>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <prvProcessTimerOrBlockTask+0x52>
 800396c:	2300      	movs	r3, #0
 800396e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <prvProcessTimerOrBlockTask+0x94>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	4619      	mov	r1, r3
 800397e:	f7ff f879 	bl	8002a74 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003982:	f7ff fa4d 	bl	8002e20 <xTaskResumeAll>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <prvProcessTimerOrBlockTask+0x98>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
    }
 800399c:	e001      	b.n	80039a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800399e:	f7ff fa3f 	bl	8002e20 <xTaskResumeAll>
    }
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200001c8 	.word	0x200001c8
 80039b0:	200001cc 	.word	0x200001cc
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <prvGetNextExpireTime+0x44>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <prvGetNextExpireTime+0x16>
 80039ca:	2201      	movs	r2, #1
 80039cc:	e000      	b.n	80039d0 <prvGetNextExpireTime+0x18>
 80039ce:	2200      	movs	r2, #0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <prvGetNextExpireTime+0x44>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e001      	b.n	80039ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039ec:	68fb      	ldr	r3, [r7, #12]
    }
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	200001c4 	.word	0x200001c4

08003a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a08:	f7ff faa6 	bl	8002f58 <xTaskGetTickCount>
 8003a0c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <prvSampleTimeNow+0x3c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d205      	bcs.n	8003a24 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a18:	f000 f918 	bl	8003c4c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e002      	b.n	8003a2a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a2a:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <prvSampleTimeNow+0x3c>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a30:	68fb      	ldr	r3, [r7, #12]
    }
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200001d4 	.word	0x200001d4

08003a40 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d812      	bhi.n	8003a8c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	1ad2      	subs	r2, r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e01b      	b.n	8003ab2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <prvInsertTimerInActiveList+0x7c>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7fe faf5 	bl	8002074 <vListInsert>
 8003a8a:	e012      	b.n	8003ab2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d206      	bcs.n	8003aa2 <prvInsertTimerInActiveList+0x62>
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e007      	b.n	8003ab2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <prvInsertTimerInActiveList+0x80>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fe fae1 	bl	8002074 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ab2:	697b      	ldr	r3, [r7, #20]
    }
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	200001c8 	.word	0x200001c8
 8003ac0:	200001c4 	.word	0x200001c4

08003ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	; 0x30
 8003ac8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003aca:	e0ac      	b.n	8003c26 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f2c0 80a8 	blt.w	8003c24 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fafe 	bl	80020e6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff87 	bl	8003a00 <prvSampleTimeNow>
 8003af2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	f200 8095 	bhi.w	8003c26 <prvProcessReceivedCommands+0x162>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <prvProcessReceivedCommands+0x40>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b2d 	.word	0x08003b2d
 8003b10:	08003b9f 	.word	0x08003b9f
 8003b14:	08003bb3 	.word	0x08003bb3
 8003b18:	08003bfb 	.word	0x08003bfb
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b2d 	.word	0x08003b2d
 8003b24:	08003b9f 	.word	0x08003b9f
 8003b28:	08003bb3 	.word	0x08003bb3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	18d1      	adds	r1, r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b4c:	f7ff ff78 	bl	8003a40 <prvInsertTimerInActiveList>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d067      	beq.n	8003c26 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b5c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05c      	beq.n	8003c26 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	441a      	add	r2, r3
 8003b74:	2300      	movs	r3, #0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b7e:	f7ff fe23 	bl	80037c8 <xTimerGenericCommand>
 8003b82:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d14d      	bne.n	8003c26 <prvProcessReceivedCommands+0x162>
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e7fe      	b.n	8003b9c <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003bb0:	e039      	b.n	8003c26 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <prvProcessReceivedCommands+0x122>
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	e7fe      	b.n	8003be4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	18d1      	adds	r1, r2, r3
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf4:	f7ff ff24 	bl	8003a40 <prvInsertTimerInActiveList>
                        break;
 8003bf8:	e015      	b.n	8003c26 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c0a:	f000 fbd7 	bl	80043bc <vPortFree>
 8003c0e:	e00a      	b.n	8003c26 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c22:	e000      	b.n	8003c26 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003c24:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <prvProcessReceivedCommands+0x184>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f107 0108 	add.w	r1, r7, #8
 8003c2e:	2200      	movs	r2, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fd0b 	bl	800264c <xQueueReceive>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f47f af47 	bne.w	8003acc <prvProcessReceivedCommands+0x8>
        }
    }
 8003c3e:	bf00      	nop
 8003c40:	3728      	adds	r7, #40	; 0x28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200001cc 	.word	0x200001cc

08003c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c52:	e047      	b.n	8003ce4 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c54:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fa3a 	bl	80020e6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d02d      	beq.n	8003ce4 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90e      	bls.n	8003cb8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7fe f9df 	bl	8002074 <vListInsert>
 8003cb6:	e015      	b.n	8003ce4 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff fd80 	bl	80037c8 <xTimerGenericCommand>
 8003cc8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <prvSwitchTimerLists+0x98>
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	e7fe      	b.n	8003ce2 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1b2      	bne.n	8003c54 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <prvSwitchTimerLists+0xc4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <prvSwitchTimerLists+0xc0>)
 8003cfa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003cfc:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <prvSwitchTimerLists+0xc4>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6013      	str	r3, [r2, #0]
    }
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200001c4 	.word	0x200001c4
 8003d10:	200001c8 	.word	0x200001c8

08003d14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d18:	f000 f95a 	bl	8003fd0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11d      	bne.n	8003d60 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d24:	4811      	ldr	r0, [pc, #68]	; (8003d6c <prvCheckForValidListAndQueue+0x58>)
 8003d26:	f7fe f954 	bl	8001fd2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d2a:	4811      	ldr	r0, [pc, #68]	; (8003d70 <prvCheckForValidListAndQueue+0x5c>)
 8003d2c:	f7fe f951 	bl	8001fd2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <prvCheckForValidListAndQueue+0x60>)
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <prvCheckForValidListAndQueue+0x58>)
 8003d34:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <prvCheckForValidListAndQueue+0x64>)
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <prvCheckForValidListAndQueue+0x5c>)
 8003d3a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	210c      	movs	r1, #12
 8003d40:	200a      	movs	r0, #10
 8003d42:	f7fe fa63 	bl	800220c <xQueueGenericCreate>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d4a:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <prvCheckForValidListAndQueue+0x54>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4908      	ldr	r1, [pc, #32]	; (8003d7c <prvCheckForValidListAndQueue+0x68>)
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fe62 	bl	8002a24 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d60:	f000 f964 	bl	800402c <vPortExitCritical>
    }
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200001cc 	.word	0x200001cc
 8003d6c:	2000019c 	.word	0x2000019c
 8003d70:	200001b0 	.word	0x200001b0
 8003d74:	200001c4 	.word	0x200001c4
 8003d78:	200001c8 	.word	0x200001c8
 8003d7c:	08004fa8 	.word	0x08004fa8

08003d80 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b04      	subs	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003db0:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <pxPortInitialiseStack+0x64>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b14      	subs	r3, #20
 8003dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b04      	subs	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f06f 0202 	mvn.w	r2, #2
 8003dce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b20      	subs	r3, #32
 8003dd4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	08003de9 	.word	0x08003de9

08003de8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <prvTaskExitError+0x50>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d009      	beq.n	8003e10 <prvTaskExitError+0x28>
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e7fe      	b.n	8003e0e <prvTaskExitError+0x26>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e22:	bf00      	nop
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0fc      	beq.n	8003e24 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000010 	.word	0x20000010
 8003e3c:	00000000 	.word	0x00000000

08003e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <pxCurrentTCBConst2>)
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	6808      	ldr	r0, [r1, #0]
 8003e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4a:	f380 8809 	msr	PSP, r0
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f380 8811 	msr	BASEPRI, r0
 8003e5a:	4770      	bx	lr
 8003e5c:	f3af 8000 	nop.w

08003e60 <pxCurrentTCBConst2>:
 8003e60:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop

08003e68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e68:	4808      	ldr	r0, [pc, #32]	; (8003e8c <prvPortStartFirstTask+0x24>)
 8003e6a:	6800      	ldr	r0, [r0, #0]
 8003e6c:	6800      	ldr	r0, [r0, #0]
 8003e6e:	f380 8808 	msr	MSP, r0
 8003e72:	f04f 0000 	mov.w	r0, #0
 8003e76:	f380 8814 	msr	CONTROL, r0
 8003e7a:	b662      	cpsie	i
 8003e7c:	b661      	cpsie	f
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	df00      	svc	0
 8003e88:	bf00      	nop
 8003e8a:	0000      	.short	0x0000
 8003e8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop

08003e94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <xPortStartScheduler+0x118>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a44      	ldr	r2, [pc, #272]	; (8003fb0 <xPortStartScheduler+0x11c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d109      	bne.n	8003eb8 <xPortStartScheduler+0x24>
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e7fe      	b.n	8003eb6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eb8:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <xPortStartScheduler+0x118>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a3d      	ldr	r2, [pc, #244]	; (8003fb4 <xPortStartScheduler+0x120>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d109      	bne.n	8003ed6 <xPortStartScheduler+0x42>
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e7fe      	b.n	8003ed4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ed6:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <xPortStartScheduler+0x124>)
 8003ed8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	22ff      	movs	r2, #255	; 0xff
 8003ee6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <xPortStartScheduler+0x128>)
 8003efc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f00:	2207      	movs	r2, #7
 8003f02:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f04:	e009      	b.n	8003f1a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003f06:	4b2e      	ldr	r3, [pc, #184]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f0e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d0ef      	beq.n	8003f06 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1c3 0307 	rsb	r3, r3, #7
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d009      	beq.n	8003f46 <xPortStartScheduler+0xb2>
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	e7fe      	b.n	8003f44 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f46:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f4e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <xPortStartScheduler+0x12c>)
 8003f5a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <xPortStartScheduler+0x130>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <xPortStartScheduler+0x130>)
 8003f6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f6e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <xPortStartScheduler+0x130>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <xPortStartScheduler+0x130>)
 8003f76:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f7a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f7c:	f000 f8d4 	bl	8004128 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <xPortStartScheduler+0x134>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f86:	f000 f8f3 	bl	8004170 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <xPortStartScheduler+0x138>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <xPortStartScheduler+0x138>)
 8003f90:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f94:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f96:	f7ff ff67 	bl	8003e68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f9a:	f7ff f8a5 	bl	80030e8 <vTaskSwitchContext>
    prvTaskExitError();
 8003f9e:	f7ff ff23 	bl	8003de8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	e000ed00 	.word	0xe000ed00
 8003fb0:	410fc271 	.word	0x410fc271
 8003fb4:	410fc270 	.word	0x410fc270
 8003fb8:	e000e400 	.word	0xe000e400
 8003fbc:	200001d8 	.word	0x200001d8
 8003fc0:	200001dc 	.word	0x200001dc
 8003fc4:	e000ed20 	.word	0xe000ed20
 8003fc8:	20000010 	.word	0x20000010
 8003fcc:	e000ef34 	.word	0xe000ef34

08003fd0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <vPortEnterCritical+0x54>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <vPortEnterCritical+0x54>)
 8003ff0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <vPortEnterCritical+0x54>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d10e      	bne.n	8004018 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <vPortEnterCritical+0x58>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <vPortEnterCritical+0x48>
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	e7fe      	b.n	8004016 <vPortEnterCritical+0x46>
    }
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	20000010 	.word	0x20000010
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <vPortExitCritical+0x4c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <vPortExitCritical+0x22>
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	e7fe      	b.n	800404c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <vPortExitCritical+0x4c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3b01      	subs	r3, #1
 8004054:	4a08      	ldr	r2, [pc, #32]	; (8004078 <vPortExitCritical+0x4c>)
 8004056:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <vPortExitCritical+0x4c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <vPortExitCritical+0x3e>
 8004060:	2300      	movs	r3, #0
 8004062:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000010 	.word	0x20000010
 800407c:	00000000 	.word	0x00000000

08004080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004080:	f3ef 8009 	mrs	r0, PSP
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <pxCurrentTCBConst>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f01e 0f10 	tst.w	lr, #16
 8004090:	bf08      	it	eq
 8004092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	6010      	str	r0, [r2, #0]
 800409c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040a4:	f380 8811 	msr	BASEPRI, r0
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f7ff f81a 	bl	80030e8 <vTaskSwitchContext>
 80040b4:	f04f 0000 	mov.w	r0, #0
 80040b8:	f380 8811 	msr	BASEPRI, r0
 80040bc:	bc09      	pop	{r0, r3}
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	6808      	ldr	r0, [r1, #0]
 80040c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c6:	f01e 0f10 	tst.w	lr, #16
 80040ca:	bf08      	it	eq
 80040cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040d0:	f380 8809 	msr	PSP, r0
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst>:
 80040e0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
        __asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004100:	f7fe ff3a 	bl	8002f78 <xTaskIncrementTick>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <SysTick_Handler+0x3c>)
 800410c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <vPortSetupTimerInterrupt+0x34>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <vPortSetupTimerInterrupt+0x38>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <vPortSetupTimerInterrupt+0x3c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <vPortSetupTimerInterrupt+0x40>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	4a09      	ldr	r2, [pc, #36]	; (800416c <vPortSetupTimerInterrupt+0x44>)
 8004146:	3b01      	subs	r3, #1
 8004148:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800414a:	4b04      	ldr	r3, [pc, #16]	; (800415c <vPortSetupTimerInterrupt+0x34>)
 800414c:	2207      	movs	r2, #7
 800414e:	601a      	str	r2, [r3, #0]
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000e010 	.word	0xe000e010
 8004160:	e000e018 	.word	0xe000e018
 8004164:	20000008 	.word	0x20000008
 8004168:	10624dd3 	.word	0x10624dd3
 800416c:	e000e014 	.word	0xe000e014

08004170 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004170:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004180 <vPortEnableVFP+0x10>
 8004174:	6801      	ldr	r1, [r0, #0]
 8004176:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800417a:	6001      	str	r1, [r0, #0]
 800417c:	4770      	bx	lr
 800417e:	0000      	.short	0x0000
 8004180:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800418e:	f3ef 8305 	mrs	r3, IPSR
 8004192:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d913      	bls.n	80041c2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800419a:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <vPortValidateInterruptPriority+0x6c>)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <vPortValidateInterruptPriority+0x70>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	7afa      	ldrb	r2, [r7, #11]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d209      	bcs.n	80041c2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	e7fe      	b.n	80041c0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <vPortValidateInterruptPriority+0x74>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <vPortValidateInterruptPriority+0x78>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d909      	bls.n	80041e6 <vPortValidateInterruptPriority+0x5e>
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	e7fe      	b.n	80041e4 <vPortValidateInterruptPriority+0x5c>
    }
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000e3f0 	.word	0xe000e3f0
 80041f8:	200001d8 	.word	0x200001d8
 80041fc:	e000ed0c 	.word	0xe000ed0c
 8004200:	200001dc 	.word	0x200001dc

08004204 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004210:	f7fe fdf8 	bl	8002e04 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004214:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <pvPortMalloc+0x1a0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800421c:	f000 f92e 	bl	800447c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <pvPortMalloc+0x1a4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 80a5 	bne.w	8004378 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02c      	beq.n	800428e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004234:	2208      	movs	r2, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d226      	bcs.n	800428e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004240:	2208      	movs	r2, #8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b00      	cmp	r3, #0
 8004250:	d020      	beq.n	8004294 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f023 0307 	bic.w	r3, r3, #7
 8004258:	3308      	adds	r3, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d213      	bcs.n	8004288 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f023 0307 	bic.w	r3, r3, #7
 8004266:	3308      	adds	r3, #8
 8004268:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00f      	beq.n	8004294 <pvPortMalloc+0x90>
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e7fe      	b.n	8004286 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800428c:	e002      	b.n	8004294 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e000      	b.n	8004296 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004294:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d06d      	beq.n	8004378 <pvPortMalloc+0x174>
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <pvPortMalloc+0x1a8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d868      	bhi.n	8004378 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042a6:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <pvPortMalloc+0x1ac>)
 80042a8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <pvPortMalloc+0x1ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042b0:	e004      	b.n	80042bc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d903      	bls.n	80042ce <pvPortMalloc+0xca>
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f1      	bne.n	80042b2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042ce:	4b35      	ldr	r3, [pc, #212]	; (80043a4 <pvPortMalloc+0x1a0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d04f      	beq.n	8004378 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	4413      	add	r3, r2
 80042e0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1ad2      	subs	r2, r2, r3
 80042f2:	2308      	movs	r3, #8
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d91e      	bls.n	8004338 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <pvPortMalloc+0x11c>
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	e7fe      	b.n	800431e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	1ad2      	subs	r2, r2, r3
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004332:	69b8      	ldr	r0, [r7, #24]
 8004334:	f000 f904 	bl	8004540 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004338:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <pvPortMalloc+0x1a8>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <pvPortMalloc+0x1a8>)
 8004344:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004346:	4b19      	ldr	r3, [pc, #100]	; (80043ac <pvPortMalloc+0x1a8>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <pvPortMalloc+0x1b0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d203      	bcs.n	800435a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004352:	4b16      	ldr	r3, [pc, #88]	; (80043ac <pvPortMalloc+0x1a8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <pvPortMalloc+0x1b0>)
 8004358:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <pvPortMalloc+0x1a4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	431a      	orrs	r2, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <pvPortMalloc+0x1b4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <pvPortMalloc+0x1b4>)
 8004376:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004378:	f7fe fd52 	bl	8002e20 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <pvPortMalloc+0x196>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	e7fe      	b.n	8004398 <pvPortMalloc+0x194>
    return pvReturn;
 800439a:	69fb      	ldr	r3, [r7, #28]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3728      	adds	r7, #40	; 0x28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20012de8 	.word	0x20012de8
 80043a8:	20012dfc 	.word	0x20012dfc
 80043ac:	20012dec 	.word	0x20012dec
 80043b0:	20012de0 	.word	0x20012de0
 80043b4:	20012df0 	.word	0x20012df0
 80043b8:	20012df4 	.word	0x20012df4

080043bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d04b      	beq.n	8004466 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80043ce:	2308      	movs	r3, #8
 80043d0:	425b      	negs	r3, r3
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4413      	add	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <vPortFree+0xb4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <vPortFree+0x42>
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e7fe      	b.n	80043fc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <vPortFree+0x5e>
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	e7fe      	b.n	8004418 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <vPortFree+0xb4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01e      	beq.n	8004466 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d11a      	bne.n	8004466 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <vPortFree+0xb4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004440:	f7fe fce0 	bl	8002e04 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <vPortFree+0xb8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4413      	add	r3, r2
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <vPortFree+0xb8>)
 8004450:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004452:	6938      	ldr	r0, [r7, #16]
 8004454:	f000 f874 	bl	8004540 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <vPortFree+0xbc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	4a06      	ldr	r2, [pc, #24]	; (8004478 <vPortFree+0xbc>)
 8004460:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004462:	f7fe fcdd 	bl	8002e20 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20012dfc 	.word	0x20012dfc
 8004474:	20012dec 	.word	0x20012dec
 8004478:	20012df8 	.word	0x20012df8

0800447c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004482:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004486:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <prvHeapInit+0xac>)
 800448a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3307      	adds	r3, #7
 800449a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <prvHeapInit+0xac>)
 80044ac:	4413      	add	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <prvHeapInit+0xb0>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <prvHeapInit+0xb0>)
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80044c8:	2208      	movs	r2, #8
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a15      	ldr	r2, [pc, #84]	; (8004530 <prvHeapInit+0xb4>)
 80044dc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <prvHeapInit+0xb4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <prvHeapInit+0xb4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <prvHeapInit+0xb4>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <prvHeapInit+0xb8>)
 800450a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a09      	ldr	r2, [pc, #36]	; (8004538 <prvHeapInit+0xbc>)
 8004512:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <prvHeapInit+0xc0>)
 8004516:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	200001e0 	.word	0x200001e0
 800452c:	20012de0 	.word	0x20012de0
 8004530:	20012de8 	.word	0x20012de8
 8004534:	20012df0 	.word	0x20012df0
 8004538:	20012dec 	.word	0x20012dec
 800453c:	20012dfc 	.word	0x20012dfc

08004540 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004548:	4b28      	ldr	r3, [pc, #160]	; (80045ec <prvInsertBlockIntoFreeList+0xac>)
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e002      	b.n	8004554 <prvInsertBlockIntoFreeList+0x14>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d8f7      	bhi.n	800454e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4413      	add	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d108      	bne.n	8004582 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	441a      	add	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d118      	bne.n	80045c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <prvInsertBlockIntoFreeList+0xb0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d00d      	beq.n	80045be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e008      	b.n	80045d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvInsertBlockIntoFreeList+0xb0>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e003      	b.n	80045d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d002      	beq.n	80045de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20012de0 	.word	0x20012de0
 80045f0:	20012de8 	.word	0x20012de8

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000014 	.word	0x20000014

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4e0d      	ldr	r6, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1ba4      	subs	r4, r4, r6
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2500      	movs	r5, #0
 800460c:	42a5      	cmp	r5, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4e0b      	ldr	r6, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f000 fc94 	bl	8004f40 <_init>
 8004618:	1ba4      	subs	r4, r4, r6
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2500      	movs	r5, #0
 800461e:	42a5      	cmp	r5, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004628:	4798      	blx	r3
 800462a:	3501      	adds	r5, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004632:	4798      	blx	r3
 8004634:	3501      	adds	r5, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08005034 	.word	0x08005034
 800463c:	08005034 	.word	0x08005034
 8004640:	08005034 	.word	0x08005034
 8004644:	08005038 	.word	0x08005038

08004648 <memcpy>:
 8004648:	b510      	push	{r4, lr}
 800464a:	1e43      	subs	r3, r0, #1
 800464c:	440a      	add	r2, r1
 800464e:	4291      	cmp	r1, r2
 8004650:	d100      	bne.n	8004654 <memcpy+0xc>
 8004652:	bd10      	pop	{r4, pc}
 8004654:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800465c:	e7f7      	b.n	800464e <memcpy+0x6>

0800465e <memset>:
 800465e:	4402      	add	r2, r0
 8004660:	4603      	mov	r3, r0
 8004662:	4293      	cmp	r3, r2
 8004664:	d100      	bne.n	8004668 <memset+0xa>
 8004666:	4770      	bx	lr
 8004668:	f803 1b01 	strb.w	r1, [r3], #1
 800466c:	e7f9      	b.n	8004662 <memset+0x4>
	...

08004670 <_puts_r>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	460e      	mov	r6, r1
 8004674:	4605      	mov	r5, r0
 8004676:	b118      	cbz	r0, 8004680 <_puts_r+0x10>
 8004678:	6983      	ldr	r3, [r0, #24]
 800467a:	b90b      	cbnz	r3, 8004680 <_puts_r+0x10>
 800467c:	f000 fa0c 	bl	8004a98 <__sinit>
 8004680:	69ab      	ldr	r3, [r5, #24]
 8004682:	68ac      	ldr	r4, [r5, #8]
 8004684:	b913      	cbnz	r3, 800468c <_puts_r+0x1c>
 8004686:	4628      	mov	r0, r5
 8004688:	f000 fa06 	bl	8004a98 <__sinit>
 800468c:	4b23      	ldr	r3, [pc, #140]	; (800471c <_puts_r+0xac>)
 800468e:	429c      	cmp	r4, r3
 8004690:	d117      	bne.n	80046c2 <_puts_r+0x52>
 8004692:	686c      	ldr	r4, [r5, #4]
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	071b      	lsls	r3, r3, #28
 8004698:	d51d      	bpl.n	80046d6 <_puts_r+0x66>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	b1db      	cbz	r3, 80046d6 <_puts_r+0x66>
 800469e:	3e01      	subs	r6, #1
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60a3      	str	r3, [r4, #8]
 80046aa:	b9e9      	cbnz	r1, 80046e8 <_puts_r+0x78>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	da2e      	bge.n	800470e <_puts_r+0x9e>
 80046b0:	4622      	mov	r2, r4
 80046b2:	210a      	movs	r1, #10
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f83f 	bl	8004738 <__swbuf_r>
 80046ba:	3001      	adds	r0, #1
 80046bc:	d011      	beq.n	80046e2 <_puts_r+0x72>
 80046be:	200a      	movs	r0, #10
 80046c0:	e011      	b.n	80046e6 <_puts_r+0x76>
 80046c2:	4b17      	ldr	r3, [pc, #92]	; (8004720 <_puts_r+0xb0>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d101      	bne.n	80046cc <_puts_r+0x5c>
 80046c8:	68ac      	ldr	r4, [r5, #8]
 80046ca:	e7e3      	b.n	8004694 <_puts_r+0x24>
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <_puts_r+0xb4>)
 80046ce:	429c      	cmp	r4, r3
 80046d0:	bf08      	it	eq
 80046d2:	68ec      	ldreq	r4, [r5, #12]
 80046d4:	e7de      	b.n	8004694 <_puts_r+0x24>
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f87f 	bl	80047dc <__swsetup_r>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0dd      	beq.n	800469e <_puts_r+0x2e>
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da04      	bge.n	80046f6 <_puts_r+0x86>
 80046ec:	69a2      	ldr	r2, [r4, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	dc06      	bgt.n	8004700 <_puts_r+0x90>
 80046f2:	290a      	cmp	r1, #10
 80046f4:	d004      	beq.n	8004700 <_puts_r+0x90>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	6022      	str	r2, [r4, #0]
 80046fc:	7019      	strb	r1, [r3, #0]
 80046fe:	e7cf      	b.n	80046a0 <_puts_r+0x30>
 8004700:	4622      	mov	r2, r4
 8004702:	4628      	mov	r0, r5
 8004704:	f000 f818 	bl	8004738 <__swbuf_r>
 8004708:	3001      	adds	r0, #1
 800470a:	d1c9      	bne.n	80046a0 <_puts_r+0x30>
 800470c:	e7e9      	b.n	80046e2 <_puts_r+0x72>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	200a      	movs	r0, #10
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	7018      	strb	r0, [r3, #0]
 8004718:	e7e5      	b.n	80046e6 <_puts_r+0x76>
 800471a:	bf00      	nop
 800471c:	08004fec 	.word	0x08004fec
 8004720:	0800500c 	.word	0x0800500c
 8004724:	08004fcc 	.word	0x08004fcc

08004728 <puts>:
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <puts+0xc>)
 800472a:	4601      	mov	r1, r0
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	f7ff bf9f 	b.w	8004670 <_puts_r>
 8004732:	bf00      	nop
 8004734:	20000014 	.word	0x20000014

08004738 <__swbuf_r>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4605      	mov	r5, r0
 8004740:	b118      	cbz	r0, 800474a <__swbuf_r+0x12>
 8004742:	6983      	ldr	r3, [r0, #24]
 8004744:	b90b      	cbnz	r3, 800474a <__swbuf_r+0x12>
 8004746:	f000 f9a7 	bl	8004a98 <__sinit>
 800474a:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <__swbuf_r+0x98>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d12a      	bne.n	80047a6 <__swbuf_r+0x6e>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	69a3      	ldr	r3, [r4, #24]
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	071a      	lsls	r2, r3, #28
 800475a:	d52e      	bpl.n	80047ba <__swbuf_r+0x82>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b363      	cbz	r3, 80047ba <__swbuf_r+0x82>
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	6963      	ldr	r3, [r4, #20]
 8004768:	b2f6      	uxtb	r6, r6
 800476a:	4283      	cmp	r3, r0
 800476c:	4637      	mov	r7, r6
 800476e:	dc04      	bgt.n	800477a <__swbuf_r+0x42>
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f000 f926 	bl	80049c4 <_fflush_r>
 8004778:	bb28      	cbnz	r0, 80047c6 <__swbuf_r+0x8e>
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	3b01      	subs	r3, #1
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	701e      	strb	r6, [r3, #0]
 8004788:	6963      	ldr	r3, [r4, #20]
 800478a:	3001      	adds	r0, #1
 800478c:	4283      	cmp	r3, r0
 800478e:	d004      	beq.n	800479a <__swbuf_r+0x62>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	07db      	lsls	r3, r3, #31
 8004794:	d519      	bpl.n	80047ca <__swbuf_r+0x92>
 8004796:	2e0a      	cmp	r6, #10
 8004798:	d117      	bne.n	80047ca <__swbuf_r+0x92>
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f911 	bl	80049c4 <_fflush_r>
 80047a2:	b190      	cbz	r0, 80047ca <__swbuf_r+0x92>
 80047a4:	e00f      	b.n	80047c6 <__swbuf_r+0x8e>
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <__swbuf_r+0x9c>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	d101      	bne.n	80047b0 <__swbuf_r+0x78>
 80047ac:	68ac      	ldr	r4, [r5, #8]
 80047ae:	e7d0      	b.n	8004752 <__swbuf_r+0x1a>
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <__swbuf_r+0xa0>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	bf08      	it	eq
 80047b6:	68ec      	ldreq	r4, [r5, #12]
 80047b8:	e7cb      	b.n	8004752 <__swbuf_r+0x1a>
 80047ba:	4621      	mov	r1, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 f80d 	bl	80047dc <__swsetup_r>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d0cc      	beq.n	8004760 <__swbuf_r+0x28>
 80047c6:	f04f 37ff 	mov.w	r7, #4294967295
 80047ca:	4638      	mov	r0, r7
 80047cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ce:	bf00      	nop
 80047d0:	08004fec 	.word	0x08004fec
 80047d4:	0800500c 	.word	0x0800500c
 80047d8:	08004fcc 	.word	0x08004fcc

080047dc <__swsetup_r>:
 80047dc:	4b32      	ldr	r3, [pc, #200]	; (80048a8 <__swsetup_r+0xcc>)
 80047de:	b570      	push	{r4, r5, r6, lr}
 80047e0:	681d      	ldr	r5, [r3, #0]
 80047e2:	4606      	mov	r6, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	b125      	cbz	r5, 80047f2 <__swsetup_r+0x16>
 80047e8:	69ab      	ldr	r3, [r5, #24]
 80047ea:	b913      	cbnz	r3, 80047f2 <__swsetup_r+0x16>
 80047ec:	4628      	mov	r0, r5
 80047ee:	f000 f953 	bl	8004a98 <__sinit>
 80047f2:	4b2e      	ldr	r3, [pc, #184]	; (80048ac <__swsetup_r+0xd0>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	d10f      	bne.n	8004818 <__swsetup_r+0x3c>
 80047f8:	686c      	ldr	r4, [r5, #4]
 80047fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	0715      	lsls	r5, r2, #28
 8004802:	d42c      	bmi.n	800485e <__swsetup_r+0x82>
 8004804:	06d0      	lsls	r0, r2, #27
 8004806:	d411      	bmi.n	800482c <__swsetup_r+0x50>
 8004808:	2209      	movs	r2, #9
 800480a:	6032      	str	r2, [r6, #0]
 800480c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	f04f 30ff 	mov.w	r0, #4294967295
 8004816:	e03e      	b.n	8004896 <__swsetup_r+0xba>
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <__swsetup_r+0xd4>)
 800481a:	429c      	cmp	r4, r3
 800481c:	d101      	bne.n	8004822 <__swsetup_r+0x46>
 800481e:	68ac      	ldr	r4, [r5, #8]
 8004820:	e7eb      	b.n	80047fa <__swsetup_r+0x1e>
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <__swsetup_r+0xd8>)
 8004824:	429c      	cmp	r4, r3
 8004826:	bf08      	it	eq
 8004828:	68ec      	ldreq	r4, [r5, #12]
 800482a:	e7e6      	b.n	80047fa <__swsetup_r+0x1e>
 800482c:	0751      	lsls	r1, r2, #29
 800482e:	d512      	bpl.n	8004856 <__swsetup_r+0x7a>
 8004830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004832:	b141      	cbz	r1, 8004846 <__swsetup_r+0x6a>
 8004834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004838:	4299      	cmp	r1, r3
 800483a:	d002      	beq.n	8004842 <__swsetup_r+0x66>
 800483c:	4630      	mov	r0, r6
 800483e:	f000 fa19 	bl	8004c74 <_free_r>
 8004842:	2300      	movs	r3, #0
 8004844:	6363      	str	r3, [r4, #52]	; 0x34
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	2300      	movs	r3, #0
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	b94b      	cbnz	r3, 8004876 <__swsetup_r+0x9a>
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d003      	beq.n	8004876 <__swsetup_r+0x9a>
 800486e:	4621      	mov	r1, r4
 8004870:	4630      	mov	r0, r6
 8004872:	f000 f9bf 	bl	8004bf4 <__smakebuf_r>
 8004876:	89a2      	ldrh	r2, [r4, #12]
 8004878:	f012 0301 	ands.w	r3, r2, #1
 800487c:	d00c      	beq.n	8004898 <__swsetup_r+0xbc>
 800487e:	2300      	movs	r3, #0
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	6963      	ldr	r3, [r4, #20]
 8004884:	425b      	negs	r3, r3
 8004886:	61a3      	str	r3, [r4, #24]
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	b953      	cbnz	r3, 80048a2 <__swsetup_r+0xc6>
 800488c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004890:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004894:	d1ba      	bne.n	800480c <__swsetup_r+0x30>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	0792      	lsls	r2, r2, #30
 800489a:	bf58      	it	pl
 800489c:	6963      	ldrpl	r3, [r4, #20]
 800489e:	60a3      	str	r3, [r4, #8]
 80048a0:	e7f2      	b.n	8004888 <__swsetup_r+0xac>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e7f7      	b.n	8004896 <__swsetup_r+0xba>
 80048a6:	bf00      	nop
 80048a8:	20000014 	.word	0x20000014
 80048ac:	08004fec 	.word	0x08004fec
 80048b0:	0800500c 	.word	0x0800500c
 80048b4:	08004fcc 	.word	0x08004fcc

080048b8 <__sflush_r>:
 80048b8:	898a      	ldrh	r2, [r1, #12]
 80048ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	4605      	mov	r5, r0
 80048c0:	0710      	lsls	r0, r2, #28
 80048c2:	460c      	mov	r4, r1
 80048c4:	d458      	bmi.n	8004978 <__sflush_r+0xc0>
 80048c6:	684b      	ldr	r3, [r1, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dc05      	bgt.n	80048d8 <__sflush_r+0x20>
 80048cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc02      	bgt.n	80048d8 <__sflush_r+0x20>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048da:	2e00      	cmp	r6, #0
 80048dc:	d0f9      	beq.n	80048d2 <__sflush_r+0x1a>
 80048de:	2300      	movs	r3, #0
 80048e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048e4:	682f      	ldr	r7, [r5, #0]
 80048e6:	6a21      	ldr	r1, [r4, #32]
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	d032      	beq.n	8004952 <__sflush_r+0x9a>
 80048ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	075a      	lsls	r2, r3, #29
 80048f2:	d505      	bpl.n	8004900 <__sflush_r+0x48>
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	1ac0      	subs	r0, r0, r3
 80048f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048fa:	b10b      	cbz	r3, 8004900 <__sflush_r+0x48>
 80048fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048fe:	1ac0      	subs	r0, r0, r3
 8004900:	2300      	movs	r3, #0
 8004902:	4602      	mov	r2, r0
 8004904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004906:	6a21      	ldr	r1, [r4, #32]
 8004908:	4628      	mov	r0, r5
 800490a:	47b0      	blx	r6
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	d106      	bne.n	8004920 <__sflush_r+0x68>
 8004912:	6829      	ldr	r1, [r5, #0]
 8004914:	291d      	cmp	r1, #29
 8004916:	d848      	bhi.n	80049aa <__sflush_r+0xf2>
 8004918:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <__sflush_r+0x108>)
 800491a:	40ca      	lsrs	r2, r1
 800491c:	07d6      	lsls	r6, r2, #31
 800491e:	d544      	bpl.n	80049aa <__sflush_r+0xf2>
 8004920:	2200      	movs	r2, #0
 8004922:	6062      	str	r2, [r4, #4]
 8004924:	04d9      	lsls	r1, r3, #19
 8004926:	6922      	ldr	r2, [r4, #16]
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	d504      	bpl.n	8004936 <__sflush_r+0x7e>
 800492c:	1c42      	adds	r2, r0, #1
 800492e:	d101      	bne.n	8004934 <__sflush_r+0x7c>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b903      	cbnz	r3, 8004936 <__sflush_r+0x7e>
 8004934:	6560      	str	r0, [r4, #84]	; 0x54
 8004936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004938:	602f      	str	r7, [r5, #0]
 800493a:	2900      	cmp	r1, #0
 800493c:	d0c9      	beq.n	80048d2 <__sflush_r+0x1a>
 800493e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004942:	4299      	cmp	r1, r3
 8004944:	d002      	beq.n	800494c <__sflush_r+0x94>
 8004946:	4628      	mov	r0, r5
 8004948:	f000 f994 	bl	8004c74 <_free_r>
 800494c:	2000      	movs	r0, #0
 800494e:	6360      	str	r0, [r4, #52]	; 0x34
 8004950:	e7c0      	b.n	80048d4 <__sflush_r+0x1c>
 8004952:	2301      	movs	r3, #1
 8004954:	4628      	mov	r0, r5
 8004956:	47b0      	blx	r6
 8004958:	1c41      	adds	r1, r0, #1
 800495a:	d1c8      	bne.n	80048ee <__sflush_r+0x36>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0c5      	beq.n	80048ee <__sflush_r+0x36>
 8004962:	2b1d      	cmp	r3, #29
 8004964:	d001      	beq.n	800496a <__sflush_r+0xb2>
 8004966:	2b16      	cmp	r3, #22
 8004968:	d101      	bne.n	800496e <__sflush_r+0xb6>
 800496a:	602f      	str	r7, [r5, #0]
 800496c:	e7b1      	b.n	80048d2 <__sflush_r+0x1a>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	e7ad      	b.n	80048d4 <__sflush_r+0x1c>
 8004978:	690f      	ldr	r7, [r1, #16]
 800497a:	2f00      	cmp	r7, #0
 800497c:	d0a9      	beq.n	80048d2 <__sflush_r+0x1a>
 800497e:	0793      	lsls	r3, r2, #30
 8004980:	680e      	ldr	r6, [r1, #0]
 8004982:	bf08      	it	eq
 8004984:	694b      	ldreq	r3, [r1, #20]
 8004986:	600f      	str	r7, [r1, #0]
 8004988:	bf18      	it	ne
 800498a:	2300      	movne	r3, #0
 800498c:	eba6 0807 	sub.w	r8, r6, r7
 8004990:	608b      	str	r3, [r1, #8]
 8004992:	f1b8 0f00 	cmp.w	r8, #0
 8004996:	dd9c      	ble.n	80048d2 <__sflush_r+0x1a>
 8004998:	4643      	mov	r3, r8
 800499a:	463a      	mov	r2, r7
 800499c:	6a21      	ldr	r1, [r4, #32]
 800499e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b0      	blx	r6
 80049a4:	2800      	cmp	r0, #0
 80049a6:	dc06      	bgt.n	80049b6 <__sflush_r+0xfe>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e78e      	b.n	80048d4 <__sflush_r+0x1c>
 80049b6:	4407      	add	r7, r0
 80049b8:	eba8 0800 	sub.w	r8, r8, r0
 80049bc:	e7e9      	b.n	8004992 <__sflush_r+0xda>
 80049be:	bf00      	nop
 80049c0:	20400001 	.word	0x20400001

080049c4 <_fflush_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	4605      	mov	r5, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	b1db      	cbz	r3, 8004a06 <_fflush_r+0x42>
 80049ce:	b118      	cbz	r0, 80049d8 <_fflush_r+0x14>
 80049d0:	6983      	ldr	r3, [r0, #24]
 80049d2:	b90b      	cbnz	r3, 80049d8 <_fflush_r+0x14>
 80049d4:	f000 f860 	bl	8004a98 <__sinit>
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <_fflush_r+0x48>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	d109      	bne.n	80049f2 <_fflush_r+0x2e>
 80049de:	686c      	ldr	r4, [r5, #4]
 80049e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e4:	b17b      	cbz	r3, 8004a06 <_fflush_r+0x42>
 80049e6:	4621      	mov	r1, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ee:	f7ff bf63 	b.w	80048b8 <__sflush_r>
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <_fflush_r+0x4c>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	d101      	bne.n	80049fc <_fflush_r+0x38>
 80049f8:	68ac      	ldr	r4, [r5, #8]
 80049fa:	e7f1      	b.n	80049e0 <_fflush_r+0x1c>
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_fflush_r+0x50>)
 80049fe:	429c      	cmp	r4, r3
 8004a00:	bf08      	it	eq
 8004a02:	68ec      	ldreq	r4, [r5, #12]
 8004a04:	e7ec      	b.n	80049e0 <_fflush_r+0x1c>
 8004a06:	2000      	movs	r0, #0
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
 8004a0a:	bf00      	nop
 8004a0c:	08004fec 	.word	0x08004fec
 8004a10:	0800500c 	.word	0x0800500c
 8004a14:	08004fcc 	.word	0x08004fcc

08004a18 <std>:
 8004a18:	2300      	movs	r3, #0
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a22:	6083      	str	r3, [r0, #8]
 8004a24:	8181      	strh	r1, [r0, #12]
 8004a26:	6643      	str	r3, [r0, #100]	; 0x64
 8004a28:	81c2      	strh	r2, [r0, #14]
 8004a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a2e:	6183      	str	r3, [r0, #24]
 8004a30:	4619      	mov	r1, r3
 8004a32:	2208      	movs	r2, #8
 8004a34:	305c      	adds	r0, #92	; 0x5c
 8004a36:	f7ff fe12 	bl	800465e <memset>
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <std+0x38>)
 8004a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x3c>)
 8004a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x40>)
 8004a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x44>)
 8004a48:	6224      	str	r4, [r4, #32]
 8004a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	bf00      	nop
 8004a50:	08004de5 	.word	0x08004de5
 8004a54:	08004e07 	.word	0x08004e07
 8004a58:	08004e3f 	.word	0x08004e3f
 8004a5c:	08004e63 	.word	0x08004e63

08004a60 <_cleanup_r>:
 8004a60:	4901      	ldr	r1, [pc, #4]	; (8004a68 <_cleanup_r+0x8>)
 8004a62:	f000 b885 	b.w	8004b70 <_fwalk_reent>
 8004a66:	bf00      	nop
 8004a68:	080049c5 	.word	0x080049c5

08004a6c <__sfmoreglue>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	1e4a      	subs	r2, r1, #1
 8004a70:	2568      	movs	r5, #104	; 0x68
 8004a72:	4355      	muls	r5, r2
 8004a74:	460e      	mov	r6, r1
 8004a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a7a:	f000 f949 	bl	8004d10 <_malloc_r>
 8004a7e:	4604      	mov	r4, r0
 8004a80:	b140      	cbz	r0, 8004a94 <__sfmoreglue+0x28>
 8004a82:	2100      	movs	r1, #0
 8004a84:	e9c0 1600 	strd	r1, r6, [r0]
 8004a88:	300c      	adds	r0, #12
 8004a8a:	60a0      	str	r0, [r4, #8]
 8004a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a90:	f7ff fde5 	bl	800465e <memset>
 8004a94:	4620      	mov	r0, r4
 8004a96:	bd70      	pop	{r4, r5, r6, pc}

08004a98 <__sinit>:
 8004a98:	6983      	ldr	r3, [r0, #24]
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	bb33      	cbnz	r3, 8004aee <__sinit+0x56>
 8004aa0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004aa4:	6503      	str	r3, [r0, #80]	; 0x50
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <__sinit+0x58>)
 8004aa8:	4a12      	ldr	r2, [pc, #72]	; (8004af4 <__sinit+0x5c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6282      	str	r2, [r0, #40]	; 0x28
 8004aae:	4298      	cmp	r0, r3
 8004ab0:	bf04      	itt	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	6183      	streq	r3, [r0, #24]
 8004ab6:	f000 f81f 	bl	8004af8 <__sfp>
 8004aba:	6060      	str	r0, [r4, #4]
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 f81b 	bl	8004af8 <__sfp>
 8004ac2:	60a0      	str	r0, [r4, #8]
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f000 f817 	bl	8004af8 <__sfp>
 8004aca:	2200      	movs	r2, #0
 8004acc:	60e0      	str	r0, [r4, #12]
 8004ace:	2104      	movs	r1, #4
 8004ad0:	6860      	ldr	r0, [r4, #4]
 8004ad2:	f7ff ffa1 	bl	8004a18 <std>
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	2109      	movs	r1, #9
 8004ada:	68a0      	ldr	r0, [r4, #8]
 8004adc:	f7ff ff9c 	bl	8004a18 <std>
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	2112      	movs	r1, #18
 8004ae4:	68e0      	ldr	r0, [r4, #12]
 8004ae6:	f7ff ff97 	bl	8004a18 <std>
 8004aea:	2301      	movs	r3, #1
 8004aec:	61a3      	str	r3, [r4, #24]
 8004aee:	bd10      	pop	{r4, pc}
 8004af0:	08004fc8 	.word	0x08004fc8
 8004af4:	08004a61 	.word	0x08004a61

08004af8 <__sfp>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <__sfp+0x70>)
 8004afc:	681e      	ldr	r6, [r3, #0]
 8004afe:	69b3      	ldr	r3, [r6, #24]
 8004b00:	4607      	mov	r7, r0
 8004b02:	b913      	cbnz	r3, 8004b0a <__sfp+0x12>
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff ffc7 	bl	8004a98 <__sinit>
 8004b0a:	3648      	adds	r6, #72	; 0x48
 8004b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	d503      	bpl.n	8004b1c <__sfp+0x24>
 8004b14:	6833      	ldr	r3, [r6, #0]
 8004b16:	b133      	cbz	r3, 8004b26 <__sfp+0x2e>
 8004b18:	6836      	ldr	r6, [r6, #0]
 8004b1a:	e7f7      	b.n	8004b0c <__sfp+0x14>
 8004b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b20:	b16d      	cbz	r5, 8004b3e <__sfp+0x46>
 8004b22:	3468      	adds	r4, #104	; 0x68
 8004b24:	e7f4      	b.n	8004b10 <__sfp+0x18>
 8004b26:	2104      	movs	r1, #4
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f7ff ff9f 	bl	8004a6c <__sfmoreglue>
 8004b2e:	6030      	str	r0, [r6, #0]
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1f1      	bne.n	8004b18 <__sfp+0x20>
 8004b34:	230c      	movs	r3, #12
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <__sfp+0x74>)
 8004b40:	6665      	str	r5, [r4, #100]	; 0x64
 8004b42:	e9c4 5500 	strd	r5, r5, [r4]
 8004b46:	60a5      	str	r5, [r4, #8]
 8004b48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004b4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004b50:	2208      	movs	r2, #8
 8004b52:	4629      	mov	r1, r5
 8004b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b58:	f7ff fd81 	bl	800465e <memset>
 8004b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b64:	e7e9      	b.n	8004b3a <__sfp+0x42>
 8004b66:	bf00      	nop
 8004b68:	08004fc8 	.word	0x08004fc8
 8004b6c:	ffff0001 	.word	0xffff0001

08004b70 <_fwalk_reent>:
 8004b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b74:	4680      	mov	r8, r0
 8004b76:	4689      	mov	r9, r1
 8004b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b7c:	2600      	movs	r6, #0
 8004b7e:	b914      	cbnz	r4, 8004b86 <_fwalk_reent+0x16>
 8004b80:	4630      	mov	r0, r6
 8004b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b8a:	3f01      	subs	r7, #1
 8004b8c:	d501      	bpl.n	8004b92 <_fwalk_reent+0x22>
 8004b8e:	6824      	ldr	r4, [r4, #0]
 8004b90:	e7f5      	b.n	8004b7e <_fwalk_reent+0xe>
 8004b92:	89ab      	ldrh	r3, [r5, #12]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d907      	bls.n	8004ba8 <_fwalk_reent+0x38>
 8004b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	d003      	beq.n	8004ba8 <_fwalk_reent+0x38>
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	47c8      	blx	r9
 8004ba6:	4306      	orrs	r6, r0
 8004ba8:	3568      	adds	r5, #104	; 0x68
 8004baa:	e7ee      	b.n	8004b8a <_fwalk_reent+0x1a>

08004bac <__swhatbuf_r>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	460e      	mov	r6, r1
 8004bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	b096      	sub	sp, #88	; 0x58
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	da07      	bge.n	8004bce <__swhatbuf_r+0x22>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	602b      	str	r3, [r5, #0]
 8004bc2:	89b3      	ldrh	r3, [r6, #12]
 8004bc4:	061a      	lsls	r2, r3, #24
 8004bc6:	d410      	bmi.n	8004bea <__swhatbuf_r+0x3e>
 8004bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bcc:	e00e      	b.n	8004bec <__swhatbuf_r+0x40>
 8004bce:	466a      	mov	r2, sp
 8004bd0:	f000 f96e 	bl	8004eb0 <_fstat_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	dbf2      	blt.n	8004bbe <__swhatbuf_r+0x12>
 8004bd8:	9a01      	ldr	r2, [sp, #4]
 8004bda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004be2:	425a      	negs	r2, r3
 8004be4:	415a      	adcs	r2, r3
 8004be6:	602a      	str	r2, [r5, #0]
 8004be8:	e7ee      	b.n	8004bc8 <__swhatbuf_r+0x1c>
 8004bea:	2340      	movs	r3, #64	; 0x40
 8004bec:	2000      	movs	r0, #0
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	b016      	add	sp, #88	; 0x58
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}

08004bf4 <__smakebuf_r>:
 8004bf4:	898b      	ldrh	r3, [r1, #12]
 8004bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bf8:	079d      	lsls	r5, r3, #30
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	d507      	bpl.n	8004c10 <__smakebuf_r+0x1c>
 8004c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	2301      	movs	r3, #1
 8004c0a:	6163      	str	r3, [r4, #20]
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	ab01      	add	r3, sp, #4
 8004c12:	466a      	mov	r2, sp
 8004c14:	f7ff ffca 	bl	8004bac <__swhatbuf_r>
 8004c18:	9900      	ldr	r1, [sp, #0]
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 f877 	bl	8004d10 <_malloc_r>
 8004c22:	b948      	cbnz	r0, 8004c38 <__smakebuf_r+0x44>
 8004c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c28:	059a      	lsls	r2, r3, #22
 8004c2a:	d4ef      	bmi.n	8004c0c <__smakebuf_r+0x18>
 8004c2c:	f023 0303 	bic.w	r3, r3, #3
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	e7e3      	b.n	8004c00 <__smakebuf_r+0xc>
 8004c38:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <__smakebuf_r+0x7c>)
 8004c3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	6020      	str	r0, [r4, #0]
 8004c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	9b00      	ldr	r3, [sp, #0]
 8004c48:	6163      	str	r3, [r4, #20]
 8004c4a:	9b01      	ldr	r3, [sp, #4]
 8004c4c:	6120      	str	r0, [r4, #16]
 8004c4e:	b15b      	cbz	r3, 8004c68 <__smakebuf_r+0x74>
 8004c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c54:	4630      	mov	r0, r6
 8004c56:	f000 f93d 	bl	8004ed4 <_isatty_r>
 8004c5a:	b128      	cbz	r0, 8004c68 <__smakebuf_r+0x74>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	431d      	orrs	r5, r3
 8004c6c:	81a5      	strh	r5, [r4, #12]
 8004c6e:	e7cd      	b.n	8004c0c <__smakebuf_r+0x18>
 8004c70:	08004a61 	.word	0x08004a61

08004c74 <_free_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4605      	mov	r5, r0
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	d045      	beq.n	8004d08 <_free_r+0x94>
 8004c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c80:	1f0c      	subs	r4, r1, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfb8      	it	lt
 8004c86:	18e4      	addlt	r4, r4, r3
 8004c88:	f000 f946 	bl	8004f18 <__malloc_lock>
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <_free_r+0x98>)
 8004c8e:	6813      	ldr	r3, [r2, #0]
 8004c90:	4610      	mov	r0, r2
 8004c92:	b933      	cbnz	r3, 8004ca2 <_free_r+0x2e>
 8004c94:	6063      	str	r3, [r4, #4]
 8004c96:	6014      	str	r4, [r2, #0]
 8004c98:	4628      	mov	r0, r5
 8004c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c9e:	f000 b93c 	b.w	8004f1a <__malloc_unlock>
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	d90c      	bls.n	8004cc0 <_free_r+0x4c>
 8004ca6:	6821      	ldr	r1, [r4, #0]
 8004ca8:	1862      	adds	r2, r4, r1
 8004caa:	4293      	cmp	r3, r2
 8004cac:	bf04      	itt	eq
 8004cae:	681a      	ldreq	r2, [r3, #0]
 8004cb0:	685b      	ldreq	r3, [r3, #4]
 8004cb2:	6063      	str	r3, [r4, #4]
 8004cb4:	bf04      	itt	eq
 8004cb6:	1852      	addeq	r2, r2, r1
 8004cb8:	6022      	streq	r2, [r4, #0]
 8004cba:	6004      	str	r4, [r0, #0]
 8004cbc:	e7ec      	b.n	8004c98 <_free_r+0x24>
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	b10a      	cbz	r2, 8004cc8 <_free_r+0x54>
 8004cc4:	42a2      	cmp	r2, r4
 8004cc6:	d9fa      	bls.n	8004cbe <_free_r+0x4a>
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	1858      	adds	r0, r3, r1
 8004ccc:	42a0      	cmp	r0, r4
 8004cce:	d10b      	bne.n	8004ce8 <_free_r+0x74>
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	4401      	add	r1, r0
 8004cd4:	1858      	adds	r0, r3, r1
 8004cd6:	4282      	cmp	r2, r0
 8004cd8:	6019      	str	r1, [r3, #0]
 8004cda:	d1dd      	bne.n	8004c98 <_free_r+0x24>
 8004cdc:	6810      	ldr	r0, [r2, #0]
 8004cde:	6852      	ldr	r2, [r2, #4]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	4401      	add	r1, r0
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	e7d7      	b.n	8004c98 <_free_r+0x24>
 8004ce8:	d902      	bls.n	8004cf0 <_free_r+0x7c>
 8004cea:	230c      	movs	r3, #12
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	e7d3      	b.n	8004c98 <_free_r+0x24>
 8004cf0:	6820      	ldr	r0, [r4, #0]
 8004cf2:	1821      	adds	r1, r4, r0
 8004cf4:	428a      	cmp	r2, r1
 8004cf6:	bf04      	itt	eq
 8004cf8:	6811      	ldreq	r1, [r2, #0]
 8004cfa:	6852      	ldreq	r2, [r2, #4]
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	bf04      	itt	eq
 8004d00:	1809      	addeq	r1, r1, r0
 8004d02:	6021      	streq	r1, [r4, #0]
 8004d04:	605c      	str	r4, [r3, #4]
 8004d06:	e7c7      	b.n	8004c98 <_free_r+0x24>
 8004d08:	bd38      	pop	{r3, r4, r5, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20012e00 	.word	0x20012e00

08004d10 <_malloc_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	1ccd      	adds	r5, r1, #3
 8004d14:	f025 0503 	bic.w	r5, r5, #3
 8004d18:	3508      	adds	r5, #8
 8004d1a:	2d0c      	cmp	r5, #12
 8004d1c:	bf38      	it	cc
 8004d1e:	250c      	movcc	r5, #12
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	4606      	mov	r6, r0
 8004d24:	db01      	blt.n	8004d2a <_malloc_r+0x1a>
 8004d26:	42a9      	cmp	r1, r5
 8004d28:	d903      	bls.n	8004d32 <_malloc_r+0x22>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6033      	str	r3, [r6, #0]
 8004d2e:	2000      	movs	r0, #0
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
 8004d32:	f000 f8f1 	bl	8004f18 <__malloc_lock>
 8004d36:	4a21      	ldr	r2, [pc, #132]	; (8004dbc <_malloc_r+0xac>)
 8004d38:	6814      	ldr	r4, [r2, #0]
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	b991      	cbnz	r1, 8004d64 <_malloc_r+0x54>
 8004d3e:	4c20      	ldr	r4, [pc, #128]	; (8004dc0 <_malloc_r+0xb0>)
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	b91b      	cbnz	r3, 8004d4c <_malloc_r+0x3c>
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f83d 	bl	8004dc4 <_sbrk_r>
 8004d4a:	6020      	str	r0, [r4, #0]
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f000 f838 	bl	8004dc4 <_sbrk_r>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d124      	bne.n	8004da2 <_malloc_r+0x92>
 8004d58:	230c      	movs	r3, #12
 8004d5a:	6033      	str	r3, [r6, #0]
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 f8dc 	bl	8004f1a <__malloc_unlock>
 8004d62:	e7e4      	b.n	8004d2e <_malloc_r+0x1e>
 8004d64:	680b      	ldr	r3, [r1, #0]
 8004d66:	1b5b      	subs	r3, r3, r5
 8004d68:	d418      	bmi.n	8004d9c <_malloc_r+0x8c>
 8004d6a:	2b0b      	cmp	r3, #11
 8004d6c:	d90f      	bls.n	8004d8e <_malloc_r+0x7e>
 8004d6e:	600b      	str	r3, [r1, #0]
 8004d70:	50cd      	str	r5, [r1, r3]
 8004d72:	18cc      	adds	r4, r1, r3
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 f8d0 	bl	8004f1a <__malloc_unlock>
 8004d7a:	f104 000b 	add.w	r0, r4, #11
 8004d7e:	1d23      	adds	r3, r4, #4
 8004d80:	f020 0007 	bic.w	r0, r0, #7
 8004d84:	1ac3      	subs	r3, r0, r3
 8004d86:	d0d3      	beq.n	8004d30 <_malloc_r+0x20>
 8004d88:	425a      	negs	r2, r3
 8004d8a:	50e2      	str	r2, [r4, r3]
 8004d8c:	e7d0      	b.n	8004d30 <_malloc_r+0x20>
 8004d8e:	428c      	cmp	r4, r1
 8004d90:	684b      	ldr	r3, [r1, #4]
 8004d92:	bf16      	itet	ne
 8004d94:	6063      	strne	r3, [r4, #4]
 8004d96:	6013      	streq	r3, [r2, #0]
 8004d98:	460c      	movne	r4, r1
 8004d9a:	e7eb      	b.n	8004d74 <_malloc_r+0x64>
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	6849      	ldr	r1, [r1, #4]
 8004da0:	e7cc      	b.n	8004d3c <_malloc_r+0x2c>
 8004da2:	1cc4      	adds	r4, r0, #3
 8004da4:	f024 0403 	bic.w	r4, r4, #3
 8004da8:	42a0      	cmp	r0, r4
 8004daa:	d005      	beq.n	8004db8 <_malloc_r+0xa8>
 8004dac:	1a21      	subs	r1, r4, r0
 8004dae:	4630      	mov	r0, r6
 8004db0:	f000 f808 	bl	8004dc4 <_sbrk_r>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d0cf      	beq.n	8004d58 <_malloc_r+0x48>
 8004db8:	6025      	str	r5, [r4, #0]
 8004dba:	e7db      	b.n	8004d74 <_malloc_r+0x64>
 8004dbc:	20012e00 	.word	0x20012e00
 8004dc0:	20012e04 	.word	0x20012e04

08004dc4 <_sbrk_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4c06      	ldr	r4, [pc, #24]	; (8004de0 <_sbrk_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4605      	mov	r5, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	6023      	str	r3, [r4, #0]
 8004dd0:	f7fd f894 	bl	8001efc <_sbrk>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_sbrk_r+0x1a>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_sbrk_r+0x1a>
 8004ddc:	602b      	str	r3, [r5, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20012e8c 	.word	0x20012e8c

08004de4 <__sread>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	460c      	mov	r4, r1
 8004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dec:	f000 f896 	bl	8004f1c <_read_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	bfab      	itete	ge
 8004df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004df6:	89a3      	ldrhlt	r3, [r4, #12]
 8004df8:	181b      	addge	r3, r3, r0
 8004dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dfe:	bfac      	ite	ge
 8004e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e02:	81a3      	strhlt	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__swrite>:
 8004e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0a:	461f      	mov	r7, r3
 8004e0c:	898b      	ldrh	r3, [r1, #12]
 8004e0e:	05db      	lsls	r3, r3, #23
 8004e10:	4605      	mov	r5, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	4616      	mov	r6, r2
 8004e16:	d505      	bpl.n	8004e24 <__swrite+0x1e>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e20:	f000 f868 	bl	8004ef4 <_lseek_r>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2e:	81a3      	strh	r3, [r4, #12]
 8004e30:	4632      	mov	r2, r6
 8004e32:	463b      	mov	r3, r7
 8004e34:	4628      	mov	r0, r5
 8004e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	f000 b817 	b.w	8004e6c <_write_r>

08004e3e <__sseek>:
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	460c      	mov	r4, r1
 8004e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e46:	f000 f855 	bl	8004ef4 <_lseek_r>
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	bf15      	itete	ne
 8004e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e5a:	81a3      	strheq	r3, [r4, #12]
 8004e5c:	bf18      	it	ne
 8004e5e:	81a3      	strhne	r3, [r4, #12]
 8004e60:	bd10      	pop	{r4, pc}

08004e62 <__sclose>:
 8004e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e66:	f000 b813 	b.w	8004e90 <_close_r>
	...

08004e6c <_write_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4c07      	ldr	r4, [pc, #28]	; (8004e8c <_write_r+0x20>)
 8004e70:	4605      	mov	r5, r0
 8004e72:	4608      	mov	r0, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	6022      	str	r2, [r4, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7fc ffed 	bl	8001e5a <_write>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_write_r+0x1e>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_write_r+0x1e>
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	20012e8c 	.word	0x20012e8c

08004e90 <_close_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4c06      	ldr	r4, [pc, #24]	; (8004eac <_close_r+0x1c>)
 8004e94:	2300      	movs	r3, #0
 8004e96:	4605      	mov	r5, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	f7fc fff9 	bl	8001e92 <_close>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_close_r+0x1a>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_close_r+0x1a>
 8004ea8:	602b      	str	r3, [r5, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	20012e8c 	.word	0x20012e8c

08004eb0 <_fstat_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4c07      	ldr	r4, [pc, #28]	; (8004ed0 <_fstat_r+0x20>)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	f7fc fff4 	bl	8001eaa <_fstat>
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	d102      	bne.n	8004ecc <_fstat_r+0x1c>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	b103      	cbz	r3, 8004ecc <_fstat_r+0x1c>
 8004eca:	602b      	str	r3, [r5, #0]
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}
 8004ece:	bf00      	nop
 8004ed0:	20012e8c 	.word	0x20012e8c

08004ed4 <_isatty_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4c06      	ldr	r4, [pc, #24]	; (8004ef0 <_isatty_r+0x1c>)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4605      	mov	r5, r0
 8004edc:	4608      	mov	r0, r1
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	f7fc fff3 	bl	8001eca <_isatty>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d102      	bne.n	8004eee <_isatty_r+0x1a>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	b103      	cbz	r3, 8004eee <_isatty_r+0x1a>
 8004eec:	602b      	str	r3, [r5, #0]
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	20012e8c 	.word	0x20012e8c

08004ef4 <_lseek_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4c07      	ldr	r4, [pc, #28]	; (8004f14 <_lseek_r+0x20>)
 8004ef8:	4605      	mov	r5, r0
 8004efa:	4608      	mov	r0, r1
 8004efc:	4611      	mov	r1, r2
 8004efe:	2200      	movs	r2, #0
 8004f00:	6022      	str	r2, [r4, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7fc ffec 	bl	8001ee0 <_lseek>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_lseek_r+0x1e>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_lseek_r+0x1e>
 8004f10:	602b      	str	r3, [r5, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20012e8c 	.word	0x20012e8c

08004f18 <__malloc_lock>:
 8004f18:	4770      	bx	lr

08004f1a <__malloc_unlock>:
 8004f1a:	4770      	bx	lr

08004f1c <_read_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4c07      	ldr	r4, [pc, #28]	; (8004f3c <_read_r+0x20>)
 8004f20:	4605      	mov	r5, r0
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f7fc ff78 	bl	8001e20 <_read>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_read_r+0x1e>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_read_r+0x1e>
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20012e8c 	.word	0x20012e8c

08004f40 <_init>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr

08004f4c <_fini>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr
